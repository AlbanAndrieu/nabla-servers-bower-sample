#
# Commands dependencies
# =====================
#
DIRENV_CMD_DEPENDENCIES="unzip tar mkdir curl chmod rm"
for mandatory_cmd in ${DIRENV_CMD_DEPENDENCIES}; do
    if [ -z "$(which ${mandatory_cmd})" ]; then
         echo "===> Mandatory command not found: ${mandatory_cmd}"
         exit 1
    fi
done
#
# Direnv configuration
# =====================
#
layout ruby
#use ruby 3.0.2

#direnv_load brew bundle exec -- direnv dump
direnv_load brew bundle

layout_node

# Either use node version specified in package.json
#use node package.json

export NODE_VERSIONS="v14.19.0"
#nvm install v14.19.0

# Or a specific version
#use node ${NODE_VERSIONS}
use_nvm ${NODE_VERSIONS}

#sudo apt install openjdk-11-dbg
#sudo update-java-alternatives -s java-1.11.0-openjdk-amd64

# layout_python3
# layout_anaconda
export PYTHON_VERSION="3.8.6"
layout pyenv ${PYTHON_VERSION}

export DIRENV_TMP_DIR="${PWD}/.direnv"
export DIRENV_BIN_DIR="${DIRENV_TMP_DIR}/bin"
if [ ! -e "${DIRENV_BIN_DIR}" ]; then
    mkdir -p "${DIRENV_BIN_DIR}"
fi
export PATH="${DIRENV_BIN_DIR}:${PATH}"
DIRENV_PYTHON_LIBS_DIR_RELATIVE="$(find ${DIRENV_TMP_DIR} -type d -name site-packages)"
export DIRENV_PYTHON_LIBS_DIR="$(realpath ${DIRENV_PYTHON_LIBS_DIR_RELATIVE})"

#
# Python pyenv installation
# ==========================
#
PYENV_PKG_URL="https://pyenv.run"
#if [ ! -e "${DIRENV_BIN_DIR}/pyenv" ]; then
if [ ! -e "${HOME}/.pyenv" ]; then
    echo "===> Getting pyenv (can take a while to execute)"
    curl -s -L "${PYENV_PKG_URL}" | bash
    #chmod 700 ${DIRENV_BIN_DIR}/pyenv
    echo "===> Run : pyenv init"
    echo "===> Run : pyenv local ${PYTHON_VERSION}"
fi

#
# Python 2 requirements
# ==========================
#

for VERSION in $(pyenv versions --bare | egrep '^2.') ; do
  pyenv shell ${VERSION} ;
  pip install py2venv ;
done

# check if python version is set in current dir
if [ -f ".python-version" ] ; then
    if [ ! -d ".venv" ] ; then
        echo "Installing virtualenv for $(python -V)"
        # if we didn't install `py2venv` for python 2.x, we would need to use
        # `virtualenv`, which you would have to install separately.
        python -m venv .venv
    fi
    echo "Activating $(python -V) virtualenv"
    source .venv/bin/activate
fi
# announce python version and show the path of the current python in ${PATH}
echo "Virtualenv has been activated for $(python -V)"
echo "$(which python)"

#
# Python pip requirements
# ==========================
#

for VERSION in $(pyenv versions --bare | egrep '^2.') ; do
  pyenv shell ${VERSION} ;
  pip install py2venv ;
done

#
# Python pip upgrade
# ==========================
#
#  curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
for VERSION in $(pyenv versions --bare) ; do
  pyenv shell ${VERSION} ;
  pip install --upgrade pip ;
done

#
# Ansible CLI installation
# ==========================
#
# python -m pip install --user https://github.com/ansible/ansible/archive/stable-2.13.tar.gz
ANSIBLE_VERSION="2.13"
ANSIBLE_PKG_URL="https://github.com/ansible/ansible/archive/stable-${ANSIBLE_VERSION}.tar.gz"
if [ ! -e "${DIRENV_BIN_DIR}/ansible" ]; then
	echo "===> Getting ansible:${ANSIBLE_VERSION} (can take a while to execute)"
	python -m pip install "${ANSIBLE_PKG_URL}"
fi

#
# Ansible configuration
# =====================
#
export ANSIBLE_LIBRARY="${PWD}/plugins/modules:${ANSIBLE_LIBRARY}"
export ANSIBLE_SSH_ARGS="-F ${PWD}/ssh.cfg"
export ANSIBLE_INVENTORY="hosts"
export ANSIBLE_COLLECTIONS_PATHS="${DIRENV_TMP_DIR}"

#
# Environment configuration
# =========================
#
#
ENV_ADDONS=".env.local .env.secrets"
for addon in ${ENV_ADDONS}; do
    if [ -e "${PWD}/${addon}" ]; then
        source ${PWD}/${addon}
    fi
done

#
# Terraform CLI installation
# ==========================
#
TF_VERSION="1.1.9"
TF_ARCH="linux_amd64"
TF_PKG_NAME="terraform_${TF_VERSION}_${TF_ARCH}.zip"
TF_PKG_URL="https://releases.hashicorp.com/terraform/${TF_VERSION}/${TF_PKG_NAME}"
TF_PKG_PATH="${DIRENV_TMP_DIR}/${TF_PKG_NAME}"
if [ ! -e "${DIRENV_BIN_DIR}/terraform" ]; then
    echo "===> Getting terraform:${TF_VERSION}:${TF_ARCH} (can take a while to execute)"
    curl -s -L "${TF_PKG_URL}" -o "${TF_PKG_PATH}"
    unzip ${TF_PKG_PATH} -d ${DIRENV_BIN_DIR}
    chmod 700 ${DIRENV_BIN_DIR}/terraform
    rm -f ${TF_PKG_PATH}
fi
#
# Terraform CLI configuration
# ==========================
#
export TF_PLUGIN_CACHE_DIR="${DIRENV_TMP_DIR}/terraform-plugin-cache"
if [ ! -e "${TF_PLUGIN_CACHE_DIR}" ]; then
    mkdir -p "${TF_PLUGIN_CACHE_DIR}"
fi

# See https://github.com/direnv/direnv/wiki/PS1
unset PS1
