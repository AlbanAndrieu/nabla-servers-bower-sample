<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<modelVersion>4.0.0</modelVersion>
	<!-- @version $Revision: $ $Date: $ $Author: $ $State: $ -->
	<!-- @formatter:off -->
	<parent>
		<artifactId>sample</artifactId>
		<groupId>com.nabla.project.sample</groupId>
		<version>1.0.1-SNAPSHOT</version>
		<relativePath></relativePath>
		<!-- lookup parent from repository -->
	</parent>

	<!--
	<parent>
		<artifactId>spring-boot-starter-parent</artifactId>
		<groupId>org.springframework.boot</groupId>
		<version>2.2.0.RELEASE</version>
	</parent>
        -->

	<artifactId>bower-sample</artifactId>
	<version>1.0.5-SNAPSHOT</version>
	<packaging>war</packaging>
	<name>Nabla Bower Sample</name>
	<description>Bower sample components</description>
	<url>https://github.com/AlbanAndrieu/nabla-servers-bower-sample</url>

	<scm>
		<connection>scm:git:git://github.com/AlbanAndrieu/nabla-servers-bower-sample.git</connection>
		<developerConnection>scm:git:git@github.com:AlbanAndrieu/nabla-servers-bower-sample.git</developerConnection>
		<tag>HEAD</tag>
		<url>https://github.com/AlbanAndrieu/nabla-servers-bower-sample</url>
	</scm>

	<issueManagement>
		<system>GitHub Issues</system>
		<url>https://github.com/AlbanAndrieu/nabla-servers-bower/issues</url>
	</issueManagement>
	<ciManagement>
		<system>Jenkins</system>
		<url>${JOB_URL}</url>
	</ciManagement>

	<!--TODO see jetty demo-base code at https://github.com/eclipse/jetty.project/blob/master/tests/test-webapps/test-jetty-webapp/pom.xml -->
	<properties>
		<cargo.jetty.jmx.activation>-Dcom.sun.management.jmxremote
            -Dcom.sun.management.jmxremote.ssl=false
            -Dcom.sun.management.jmxremote.authenticate=false
            -Dcom.sun.management.jmxremote.port=${cargo.monitoring.jmx.rmi.port}
            -Djetty.jmxrmihost=${jetty.jmxremote.rmiserverhost}
            -Djetty.jmxrmiport=${jetty.jmxremote.rmiserverport}</cargo.jetty.jmx.activation>
		<cargo.jmx.activation>${cargo.jetty.jmx.activation}</cargo.jmx.activation>
		<cargo.monitoring.jmx.rmi.port>10088</cargo.monitoring.jmx.rmi.port>
		<!-- 9443 is used by zap see jetty-ssl.xml in src/main/config/demo-base/etc -->
		<cargo.protocol>http</cargo.protocol>

		<commons.io.version>2.6</commons.io.version>
		<commons.version>1.10</commons.version>
		<docker.compose.version>0.9.9</docker.compose.version>
		<documentation.output.directory>${basedir}/docs</documentation.output.directory>
		<doxia.core.version>1.8</doxia.core.version>
		<doxia.version>1.11.1</doxia.version>
		<groovy.eclipse.batch.version>2.5.7-01</groovy.eclipse.batch.version>
		<groovy.eclipse.compiler.version>3.4.0-01</groovy.eclipse.compiler.version>
		<groovy.version>2.4.6</groovy.version>
		<groovydoc.directory.name>groovydocs</groovydoc.directory.name>
		<guava.version>14.0</guava.version>
		<guice.version>4.1.0</guice.version>
		<hamcrest.version>2.2</hamcrest.version>
		<hibernate.common.version>4.0.5.Final</hibernate.common.version>
		<hibernate.javax.persistence.version>1.0.0.Final</hibernate.javax.persistence.version>
		<hibernate.version>4.3.6.Final</hibernate.version>
		<http.builder.version>0.7.1</http.builder.version>

		<jacoco.version>0.8.5</jacoco.version>
		<java.ws.version>2.0</java.ws.version>
		<javax.activation.version>1.1.1</javax.activation.version>
		<javax.jsp.api.version>2.0</javax.jsp.api.version>
		<javax.servlet.api.version>4.0.1</javax.servlet.api.version>
		<javax.validation.version>2.0.1.Final</javax.validation.version>
		<jaxb.api.version>${jaxb.version}</jaxb.api.version>
		<jaxb.core.version>${jaxb.version}</jaxb.core.version>
		<jaxb.impl.version>${jaxb.version}</jaxb.impl.version>
		<jaxb.version>2.2.11</jaxb.version>

		<jdk.level>11</jdk.level>
		<jdk.target>1.8</jdk.target>
		<jdk.version>${jdk.level}</jdk.version>
		<!--
		<jdk.level>1.8</jdk.level>
		<jdk.version>1.8.0</jdk.version>
    -->
		<jersey.bom.version>${jersey.version}</jersey.bom.version>
		<jersey.version>2.28</jersey.version>
		<jetty.jmxremote.rmihost>localhost</jetty.jmxremote.rmihost>
		<jetty.jmxremote.rmiport>3099</jetty.jmxremote.rmiport>
		<jetty.runner.version>${jetty9.version}</jetty.runner.version>
		<jetty.ssl.port>9443</jetty.ssl.port>

		<!--
		<javax.ws.rs-api.version>2.0</javax.ws.rs-api.version>
		<validation.api.version>1.1.0.Final</validation.api.version>
		-->

		<!--<jetty9.version>9.4.28.v20200408</jetty9.version>-->
		<jetty9.version>9.4.19.v20190610</jetty9.version>
		<!-- <jetty9.version>9.4.44.v20210927</jetty9.version> NOK -->

		<jmockit.version>1.19</jmockit.version>
		<jsr305.version>2.0.1</jsr305.version>
		<junit.bom.version>5.7.1</junit.bom.version>
		<junit.version>4.12</junit.version>
		<log4j.core.version>2.22.0</log4j.core.version>
		<log4j.version>1.2.17</log4j.version>
		<logback.version>1.2.10</logback.version>
		<maven.assembly.plugin.version>3.3.0</maven.assembly.plugin.version>
		<maven.build.helper.plugin.version>3.0.0</maven.build.helper.plugin.version>
		<maven.buildnumber.plugin.version>1.4</maven.buildnumber.plugin.version>
		<maven.bundle.plugin.version>4.2.0</maven.bundle.plugin.version>
		<maven.cargo.maven2.plugin.version>1.9.0</maven.cargo.maven2.plugin.version>
		<maven.cargo.maven3.plugin.version>1.9.9</maven.cargo.maven3.plugin.version>
		<maven.clean.plugin.version>3.1.0</maven.clean.plugin.version>
		<maven.compiler.plugin.version>3.8.1</maven.compiler.plugin.version>
		<maven.dependency.check.plugin.version>6.5.3</maven.dependency.check.plugin.version>
		<maven.dependency.plugin.version>3.2.0</maven.dependency.plugin.version>
		<maven.deploy.plugin.version>2.8.2</maven.deploy.plugin.version>
		<maven.dockerfile.plugin.version>1.4.4</maven.dockerfile.plugin.version>
		<maven.enforcer.plugin.version>3.0.0</maven.enforcer.plugin.version>
		<maven.exec.plugin.version>1.6.0</maven.exec.plugin.version>
		<maven.exec.skip>false</maven.exec.skip>
		<maven.fabric8-docker-maven.plugin.version>0.33.0</maven.fabric8-docker-maven.plugin.version>
		<maven.fabric8.docker.plugin.version>0.26.1</maven.fabric8.docker.plugin.version>
		<maven.failsafe.plugin.version>${maven.surefire.plugin.version}</maven.failsafe.plugin.version>

		<maven.frontend.plugin.version>1.12.0</maven.frontend.plugin.version>
		<maven.git-commit-id.plugin.version>3.0.0</maven.git-commit-id.plugin.version>
		<maven.git.commit.id.plugin.version>2.2.4</maven.git.commit.id.plugin.version>
		<maven.gmavenplus.plugin.version>1.5</maven.gmavenplus.plugin.version>
		<maven.install.plugin.version>2.5.2</maven.install.plugin.version>
		<maven.jacoco.plugin.version>${jacoco.version}</maven.jacoco.plugin.version>
		<maven.jar.plugin.version>3.2.0</maven.jar.plugin.version>
		<maven.jarsigner.plugin.version>3.0.0</maven.jarsigner.plugin.version>
		<maven.javadoc.plugin.version>3.0.1</maven.javadoc.plugin.version>
		<maven.javafx.plugin.version>8.8.3</maven.javafx.plugin.version>
		<maven.jaxrs.analyzer.plugin.version>0.16</maven.jaxrs.analyzer.plugin.version>
		<maven.jenkinsfile.plugin.version>1.0.1</maven.jenkinsfile.plugin.version>
		<maven.jetty.eclipse.plugin.version>${jetty9.version}</maven.jetty.eclipse.plugin.version>
		<maven.jgitflow.plugin.version>1.0-m5.1</maven.jgitflow.plugin.version>
		<maven.lifecycle.mapping.version>1.0.0</maven.lifecycle.mapping.version>
		<maven.nexus.staging.plugin.version>1.6.8</maven.nexus.staging.plugin.version>
		<maven.openapi.generator.plugin.version>4.3.1</maven.openapi.generator.plugin.version>
		<maven.pitest.plugin.version>1.12.0</maven.pitest.plugin.version>
		<maven.project.info.reports.plugin.version>3.0.0</maven.project.info.reports.plugin.version>
		<maven.resources.plugin.version>3.3.1</maven.resources.plugin.version>
		<maven.shade.plugin.version>3.2.1</maven.shade.plugin.version>
		<maven.site.plugin.version>3.7.1</maven.site.plugin.version>
		<maven.sonar.plugin.version>3.7.0.1746</maven.sonar.plugin.version>
		<maven.sortpom.plugin.version>2.8.0</maven.sortpom.plugin.version>
		<maven.spotbugs.plugin.version>3.1.12</maven.spotbugs.plugin.version>
		<maven.spring.boot.plugin.version>2.3.5.RELEASE</maven.spring.boot.plugin.version>
		<!--<maven.surefire.plugin.version>2.22.2</maven.surefire.plugin.version>-->
		<maven.surefire.plugin.version>3.0.0-M5</maven.surefire.plugin.version>
		<maven.tomcat7.plugin.version>2.2</maven.tomcat7.plugin.version>
		<maven.toolchains.plugin.version>3.0.0</maven.toolchains.plugin.version>
		<maven.war.plugin.version>2.4</maven.war.plugin.version>
		<maven.zkm.plugin.version>1.0.3</maven.zkm.plugin.version>
		<maven.zkm.version>12.0.0</maven.zkm.version>

		<!--<node.version>9.3.0</node.version> FreeNas -->
		<!--<node.version>8.9.3</node.version> NOK -->
		<!--<node.version>7.8.0</node.version> Ubuntu -->
		<!--<node.version>12.16.1</node.version>-->
		<node.version>14.19.0</node.version>
		<npm.version>6.14.16</npm.version>

		<org.umlgraph.umlgraph.version>5.6.6</org.umlgraph.umlgraph.version>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<prometheus.version>1.3.5</prometheus.version>
		<restfulaudit.version>1.2.2</restfulaudit.version>
		<server.version>${jetty.version}</server.version>
		<slf4j.version>1.7.13</slf4j.version>
		<sonar.sourceEncoding>UTF-8</sonar.sourceEncoding>
		<!--<spring.cloud.version>Hoxton.SR6</spring.cloud.version>-->
		<!--<spring.cloud.starter.parent.version>Hoxton.RELEASE</spring.cloud.starter.parent.version>
		<spring.boot.starter.parent.version>2.3.12.RELEASE</spring.boot.starter.parent.version>-->
		<spring.boot.starter.parent.version>2.6.4</spring.boot.starter.parent.version>
		<!--<spring.boot.admin.version>2.2.3</spring.boot.admin.version>-->
		<spring.boot.starter.web.version>2.3.5.RELEASE</spring.boot.starter.web.version>

		<spring.boot.version>2.2.2.RELEASE</spring.boot.version>
		<spring.metrics.version>0.5.1.RELEASE</spring.metrics.version>
		<spring.version>5.2.2.RELEASE</spring.version>
		<springdoc.openapi.version>1.2.32</springdoc.openapi.version>
		<springfox.version>2.9.2</springfox.version>
		<sun.jsf.version>2.2.7</sun.jsf.version>
		<swagger.annotations.version>1.5.20</swagger.annotations.version>
		<swagger2.version>2.9.2</swagger2.version>

		<testcontainers.version>1.9.1</testcontainers.version>

		<!-- jenkins cargo 8182,8183 -->
		<tomcat.port>8280</tomcat.port>
		<webdriver.base.url>${cargo.protocol}://${cargo.host}:${cargo.port}</webdriver.base.url>
		<yarn.version>1.12.3</yarn.version>
	</properties>
	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.codehaus.groovy</groupId>
				<artifactId>groovy</artifactId>
				<version>${groovy.version}</version>
			</dependency>
			<dependency>
				<groupId>org.glassfish.jersey</groupId>
				<artifactId>jersey-bom</artifactId>
				<version>${jersey.bom.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>org.codehaus.groovy</groupId>
				<artifactId>groovy-all</artifactId>
				<version>${groovy.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>org.junit</groupId>
				<artifactId>junit-bom</artifactId>
				<version>${junit.bom.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-parent</artifactId>
				<version>${spring.boot.starter.parent.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<!--
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-starter-parent</artifactId>
				<version>${spring.cloud.starter.parent.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
-->
		</dependencies>
	</dependencyManagement>
	<dependencies>
		<!--
        <dependency>
                <groupId>com.sun.faces</groupId>
                <artifactId>jsf-api</artifactId>
                <scope>${scope.tomcat.never.type}</scope>
        </dependency>
        <dependency>
                <groupId>com.sun.faces</groupId>
                <artifactId>jsf-impl</artifactId>
                <scope>${scope.tomcat.never.type}</scope>
        </dependency>
        -->
		<dependency>
			<groupId>org.glassfish.jersey.core</groupId>
			<artifactId>jersey-server</artifactId>
		</dependency>
		<dependency>
			<groupId>org.glassfish.jersey.containers</groupId>
			<artifactId>jersey-container-servlet-core</artifactId>
		</dependency>
		<dependency>
			<groupId>org.glassfish.jersey.containers</groupId>
			<artifactId>jersey-container-jetty-http</artifactId>
		</dependency>
		<dependency>
			<groupId>org.glassfish.jersey.media</groupId>
			<artifactId>jersey-media-moxy</artifactId>
		</dependency>
		<!--  Jersey Client required for test *and runtime* due to Jersey bug : https://java.net/jira/browse/JERSEY-2104 -->
		<!-- This dependency can be scoped to test when Jersey is upgraded to >=2.4 -->
		<dependency>
			<groupId>org.glassfish.jersey.core</groupId>
			<artifactId>jersey-client</artifactId>
			<!--<scope>test</scope> -->
		</dependency>
		<dependency>
			<groupId>org.glassfish.jersey.inject</groupId>
			<artifactId>jersey-hk2</artifactId>
			<version>${jersey.version}</version>
		</dependency>
		<dependency>
			<groupId>org.codehaus.groovy</groupId>
			<artifactId>groovy-all</artifactId>
			<version>${groovy.version}</version>
		</dependency>

		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>${slf4j.version}</version>
			<exclusions>
				<!-- circular dependency -->
				<exclusion>
					<artifactId>logback-classic</artifactId>
					<groupId>ch.qos.logback</groupId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.ow2.asm</groupId>
			<artifactId>asm</artifactId>
			<version>${asm.ow2.version}</version>
		</dependency>

		<dependency>
			<groupId>com.google.guava</groupId>
			<artifactId>guava</artifactId>
			<version>${guava.version}</version>
		</dependency>
		<dependency>
			<groupId>com.google.code.findbugs</groupId>
			<artifactId>jsr305</artifactId>
			<version>${jsr305.version}</version>
			<optional>true</optional>
			<!-- needed only for annotations -->
		</dependency>

		<dependency>
			<groupId>javax.xml.bind</groupId>
			<artifactId>jaxb-api</artifactId>
			<version>${jaxb.api.version}</version>
		</dependency>
		<dependency>
			<groupId>com.sun.xml.bind</groupId>
			<artifactId>jaxb-core</artifactId>
			<version>${jaxb.core.version}</version>
		</dependency>
		<dependency>
			<groupId>com.sun.xml.bind</groupId>
			<artifactId>jaxb-impl</artifactId>
			<version>${jaxb.impl.version}</version>
		</dependency>
		<dependency>
			<groupId>javax.activation</groupId>
			<artifactId>activation</artifactId>
			<version>${javax.activation.version}</version>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
			<!--<version>${spring.boot.version}</version>-->
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-webflux</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-configuration-processor</artifactId>
			<optional>true</optional>
		</dependency>

		<!-- if a war
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <version>${spring.boot.starter.web.version}</version>
        </dependency>
    -->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<!--<version>${lombok.version}</version>
		  <scope>provided</scope>-->
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<version>${javax.servlet.api.version}</version>
			<scope>provided</scope>
			<!-- javax.servlet-api-3.0.1.jar Offending class javax/servlet/Servlet.class  in Tomcat -->
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>io.micrometer</groupId>
			<artifactId>micrometer-registry-prometheus</artifactId>
			<!--<version>${prometheus.version}</version>-->
			<scope>runtime</scope>
		</dependency>

		<!-- test dependencies -->
		<dependency>
			<groupId>org.codehaus.groovy</groupId>
			<artifactId>groovy-test</artifactId>
			<version>${groovy.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.codehaus.groovy.modules.http-builder</groupId>
			<artifactId>http-builder</artifactId>
			<version>${http.builder.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.hamcrest</groupId>
			<artifactId>hamcrest-core</artifactId>
			<version>${hamcrest.version}</version>
			<scope>test</scope>
		</dependency>
		<!-- jmockit musr be after junit in the classpath -->
		<dependency>
			<groupId>org.jmockit</groupId>
			<artifactId>jmockit</artifactId>
			<version>${jmockit.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
			<exclusions>
				<exclusion>
					<artifactId>junit-vintage-engine</artifactId>
					<groupId>org.junit.vintage</groupId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>io.projectreactor</groupId>
			<artifactId>reactor-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>
	<build>
		<extensions>
			<extension>
				<groupId>kr.motd.maven</groupId>
				<artifactId>os-maven-plugin</artifactId>
				<version>1.7.0</version>
			</extension>
		</extensions>
		<finalName>test</finalName>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>${maven.lifecycle.mapping.version}</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.owasp</groupId>
										<artifactId>dependency-check-maven</artifactId>
										<versionRange>[0.0,)</versionRange>
										<goals>
											<goal>check</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>com.github.eirslett</groupId>
										<artifactId>frontend-maven-plugin</artifactId>
										<versionRange>[0.0,)</versionRange>
										<goals>
											<goal>install-node-and-npm</goal>
											<goal>npm</goal>
											<goal>grunt</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.jacoco</groupId>
										<artifactId>jacoco-maven-plugin</artifactId>
										<versionRange>[0.0,)</versionRange>
										<goals>
											<goal>prepare-agent</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.apache.felix</groupId>
										<artifactId>maven-bundle-plugin</artifactId>
										<versionRange>[0.0,)</versionRange>
										<goals>
											<goal>manifest</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.codehaus.mojo</groupId>
										<artifactId>exec-maven-plugin</artifactId>
										<versionRange>[0.0,)</versionRange>
										<goals>
											<goal>exec</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-assembly-plugin</artifactId>
					<version>${maven.assembly.plugin.version}</version>
					<dependencies>
						<dependency>
							<groupId>org.eclipse.jetty.toolchain</groupId>
							<artifactId>jetty-assembly-descriptors</artifactId>
							<version>1.0</version>
						</dependency>
					</dependencies>
				</plugin>
				<plugin>
					<groupId>com.github.spotbugs</groupId>
					<artifactId>spotbugs-maven-plugin</artifactId>
					<version>${maven.spotbugs.plugin.version}</version>
					<dependencies>
						<!-- overwrite dependency on spotbugs if you want to specify the version of spotbugs -->
						<dependency>
							<groupId>com.github.spotbugs</groupId>
							<artifactId>spotbugs</artifactId>
							<version>${maven.spotbugs.plugin.version}</version>
						</dependency>
					</dependencies>
					<configuration>
						<effort>Max</effort>
						<threshold>Low</threshold>
						<failOnError>true</failOnError>
						<includeFilterFile>${session.executionRootDirectory}/spotbugs-security-include.xml</includeFilterFile>
						<excludeFilterFile>${session.executionRootDirectory}/spotbugs-security-exclude.xml</excludeFilterFile>
						<plugins>
							<plugin>
								<groupId>com.h3xstream.findsecbugs</groupId>
								<artifactId>findsecbugs-plugin</artifactId>
								<version>LATEST</version>
							</plugin>
						</plugins>
					</configuration>
				</plugin>
				<plugin>
					<groupId>com.github.ekryd.sortpom</groupId>
					<artifactId>sortpom-maven-plugin</artifactId>
					<version>${maven.sortpom.plugin.version}</version>
					<configuration>
						<lineSeparator>\n</lineSeparator>
						<encoding>${project.build.sourceEncoding}</encoding>
						<sortProperties>true</sortProperties>
						<keepBlankLines>true</keepBlankLines>
						<nrOfIndentSpace>-1</nrOfIndentSpace>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.owasp</groupId>
					<artifactId>dependency-check-maven</artifactId>
					<version>${maven.dependency.check.plugin.version}</version>
					<configuration>
						<format>XML</format>
						<skipProvidedScope>true</skipProvidedScope>
						<skipRuntimeScope>true</skipRuntimeScope>
						<skipSystemScope>true</skipSystemScope>
						<assemblyAnalyzerEnabled>false</assemblyAnalyzerEnabled>
						<centralAnalyzerEnabled>false</centralAnalyzerEnabled>
						<nexusAnalyzerEnabled>false</nexusAnalyzerEnabled>
						<!--
            <cveUrl12Modified>http://albandrieu.com/download/nist/nvdcve-Modified.xml.gz</cveUrl12Modified>
            <cveUrl20Modified>http://albandrieu.com/download/nist/nvdcve-2.0-Modified.xml.gz</cveUrl20Modified>
            <cveUrl12Base>http://albandrieu.com/download/nist/nvdcve-%d.xml</cveUrl12Base>
            <cveUrl20Base>http://albandrieu.com/download/nist/nvdcve-2.0-%d.xml</cveUrl20Base>
            -->
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-project-info-reports-plugin</artifactId>
					<version>${maven.project.info.reports.plugin.version}</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-site-plugin</artifactId>
					<version>${maven.site.plugin.version}</version>
					<dependencies>
						<!--
						<dependency>
							<groupId>org.apache.maven.doxia</groupId>
							<artifactId>doxia-core</artifactId>
							<version>${doxia.core.version}</version>
						</dependency>
            -->
						<dependency>
							<groupId>org.apache.maven.doxia</groupId>
							<artifactId>doxia-site-renderer</artifactId>
							<version>${doxia.version}</version>
						</dependency>
					</dependencies>
					<configuration>
						<encoding>${project.build.sourceEncoding}</encoding>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.jacoco</groupId>
					<artifactId>jacoco-maven-plugin</artifactId>
					<version>${maven.jacoco.plugin.version}</version>
					<configuration>
						<!-- includes> <include>com.test.project.**</include> </includes -->
						<dumpOnExit>true</dumpOnExit>
						<append>true</append>
						<output>file</output>
						<!--classDumpDir>${project.build.directory}/jacoco-instrumented</classDumpDir -->
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-jarsigner-plugin</artifactId>
					<version>${maven.jarsigner.plugin.version}</version>
					<executions>
						<execution>
							<id>verify</id>
							<goals>
								<goal>verify</goal>
							</goals>
						</execution>
					</executions>
					<configuration>
						<!--<verbose>true</verbose>-->
						<certs>true</certs>
					</configuration>
				</plugin>
				<plugin>
					<groupId>io.fabric8</groupId>
					<artifactId>docker-maven-plugin</artifactId>
					<version>${maven.fabric8-docker-maven.plugin.version}</version>
				</plugin>
				<plugin>
					<groupId>pl.project13.maven</groupId>
					<artifactId>git-commit-id-plugin</artifactId>
					<version>${maven.git-commit-id.plugin.version}</version>
				</plugin>
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>buildnumber-maven-plugin</artifactId>
					<version>${maven.buildnumber.plugin.version}</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-jar-plugin</artifactId>
					<version>${maven.jar.plugin.version}</version>
				</plugin>
			</plugins>
		</pluginManagement>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-install-plugin</artifactId>
				<version>${maven.install.plugin.version}</version>
				<configuration>
					<installAtEnd>true</installAtEnd>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-deploy-plugin</artifactId>
				<version>${maven.deploy.plugin.version}</version>
				<configuration>
					<deployAtEnd>true</deployAtEnd>
					<retryFailedDeploymentCount>2</retryFailedDeploymentCount>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-clean-plugin</artifactId>
				<version>${maven.clean.plugin.version}</version>
				<configuration>
					<filesets>
						<fileset>
							<directory>${project.basedir}</directory>
							<includes>
								<!--
                                <include>.bower/</include>
                                <include>.node_cache/</include>
                                <include>.node_tmp/</include>
                                <include>.tmp/</include>
                                <include>.sass-cache/</include>
                                <include>node_modules/</include>
                                <include>node/</include>
                                -->
								<include>bower_components/</include>
								<!-- bower install is not installing bower_components/angular/angular.js properly -->
								<include>lib/</include>
								<include>docs/</include>
								<include>dist/</include>
								<!--<include>build/</include> -->
							</includes>
							<excludes>
								<!-- Allow mvn clean install > install.log -->
								<exclude>**/build.log</exclude>
								<exclude>**/install.log</exclude>
							</excludes>
							<followSymlinks>false</followSymlinks>
						</fileset>
					</filesets>
				</configuration>
			</plugin>
			<!--
			<plugin>
				<groupId>com.sebastian-daschner</groupId>
				<artifactId>jaxrs-analyzer-maven-plugin</artifactId>
				<version>${maven.jaxrs.analyzer.plugin.version}</version>
				<executions>
					<execution>
						<goals>
							<goal>analyze-jaxrs</goal>
						</goals>
						<configuration>
							<backend>plaintext</backend>
							<deployedDomain>localhost</deployedDomain>
						</configuration>
					</execution>
				</executions>
			</plugin>
      -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>exec-maven-plugin</artifactId>
				<version>${maven.exec.plugin.version}</version>
				<executions>
					<execution>
						<id>exec-npm-install</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<executable>npm</executable>
							<arguments>
								<argument>install</argument>
								<!-- no-optional -->
							</arguments>
						</configuration>
					</execution>
					<execution>
						<id>exec-bash-webdriver</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<executable>bash</executable>
							<commandlineArgs>scripts/webdriver.sh</commandlineArgs>
						</configuration>
					</execution>
					<!--
					<execution>
						<id>exec-yarn-install</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<executable>yarn</executable>
							<arguments>
								<argument>install</argument>
								<argument>ignore-optional</argument>
							</arguments>
						</configuration>
					</execution>
          -->
					<execution>
						<id>exec-bower-install</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<executable>bower</executable>
							<arguments>
								<argument>install</argument>
								<argument>--allow-root</argument>
							</arguments>
						</configuration>
					</execution>
					<execution>
						<id>exec-grunt-prepare</id>
						<phase>generate-resources</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<executable>grunt</executable>
							<arguments>
								<argument>prepare</argument>
							</arguments>
						</configuration>
					</execution>
					<execution>
						<id>exec-grunt-check</id>
						<phase>process-resources</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<executable>grunt</executable>
							<arguments>
								<argument>check</argument>
							</arguments>
						</configuration>
					</execution>
					<execution>
						<id>exec-grunt-default</id>
						<phase>compile</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<executable>grunt</executable>
							<arguments>
								<argument>default</argument>
								<argument>--skipTests=${maven.test.skip}</argument>
							</arguments>
						</configuration>
					</execution>
					<!--
                    <execution>
                        <id>exec-grunt-integration-test</id>
                        <phase>integration-test</phase>
                        <configuration>
                            <executable>grunt</executable>
                            <arguments>
                                <argument>integration-test</argument>
                            </arguments>
                        </configuration>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                    </execution>
                    -->
					<execution>
						<id>exec-grunt-site</id>
						<phase>site</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<executable>grunt</executable>
							<arguments>
								<argument>site</argument>
							</arguments>
						</configuration>
					</execution>
				</executions>
				<configuration>
					<skip>${maven.exec.skip}</skip>
					<environmentVariables>
						<!-- The following parameters create an NPM sandbox for CI -->
						<NPM_CONFIG_PREFIX>${basedir}/npm</NPM_CONFIG_PREFIX>
						<NPM_CONFIG_CACHE>${NPM_CONFIG_PREFIX}/cache</NPM_CONFIG_CACHE>
						<NPM_CONFIG_TMP>${project.build.directory}/npmtmp</NPM_CONFIG_TMP>
					</environmentVariables>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>${maven.compiler.plugin.version}</version>
				<dependencies>
					<dependency>
						<groupId>org.codehaus.groovy</groupId>
						<artifactId>groovy-eclipse-compiler</artifactId>
						<version>${groovy.eclipse.compiler.version}</version>
					</dependency>
					<dependency>
						<groupId>org.codehaus.groovy</groupId>
						<artifactId>groovy-eclipse-batch</artifactId>
						<version>${groovy.eclipse.batch.version}</version>
					</dependency>
				</dependencies>
				<configuration>
					<source>${jdk.level}</source>
					<target>${jdk.target}</target>
					<!--<release>11</release>-->
					<compilerId>groovy-eclipse-compiler</compilerId>
					<verbose>true</verbose>
					<annotationProcessorPaths>
						<path>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
							<version>${lombok.version}</version>
						</path>
						<path>
							<groupId>org.mapstruct</groupId>
							<artifactId>mapstruct-processor</artifactId>
							<version>${mapstruct.version}</version>
						</path>
					</annotationProcessorPaths>
					<compilerArgs>
						<compilerArg>-Amapstruct.defaultComponentModel=spring</compilerArg>
						<compilerArg>-Amapstruct.suppressGeneratorVersionInfoComment=true</compilerArg>
					</compilerArgs>
				</configuration>
			</plugin>
			<!--
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-toolchains-plugin</artifactId>
				<version>${maven.toolchains.plugin.version}</version>
				<configuration>
					<toolchains>
						<jdk>
							<version>[11,)</version>
						</jdk>
					</toolchains>
				</configuration>
			</plugin>
      -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<version>${maven.build.helper.plugin.version}</version>
				<executions>
					<execution>
						<id>add-source</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>add-source</goal>
						</goals>
						<configuration>
							<sources>
								<source>src/main/groovy</source>
							</sources>
						</configuration>
					</execution>
					<execution>
						<id>add-test-source</id>
						<phase>generate-test-sources</phase>
						<goals>
							<goal>add-test-source</goal>
						</goals>
						<configuration>
							<sources>
								<source>src/test/groovy</source>
							</sources>
						</configuration>
					</execution>
					<!-- Build helper maven plugin sets the parsedVersion.osgiVersion property -->
					<execution>
						<id>set-osgi-version</id>
						<phase>validate</phase>
						<goals>
							<goal>parse-version</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<!--
            <plugin>
                <groupId>com.github.eirslett</groupId>
                <artifactId>frontend-maven-plugin</artifactId>
                <version>${maven.frontend.plugin.version}</version>
                <executions>
                    -->
			<!--install \-\-no-optional
                    <execution>
                        <id>install node and npm</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>install-node-and-npm</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>npm install</id>
                        <phase>process-sources</phase>
                        <goals>
                            <goal>npm</goal>
                        </goals>
                        <configuration>
                            <arguments>install</arguments>
                        </configuration>
                    </execution>
                    -->
			<!--
                    <execution>
                        <id>install node and yarn</id>
                        <phase>validate</phase>
                        <goals>
                            <goal>install-node-and-yarn</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>yarn install</id>
                        <phase>initialize</phase>
                        <goals>
                            <goal>yarn</goal>
                        </goals>
                        <configuration>
                            <arguments>install</arguments>
                        </configuration>
                    </execution>
                    -->
			<!--
                    <execution>
                        <id>grunt prepare</id>
                        <phase>generate-resources</phase>
                        <goals>
                            <goal>grunt</goal>
                        </goals>
                        <configuration>
                            <arguments>prepare</arguments>
                        </configuration>
                    </execution>
                    <execution>
                        <id>grunt check</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>grunt</goal>
                        </goals>
                        <configuration>
                            <arguments>check</arguments>
                        </configuration>
                    </execution>
                    <execution>
                        <id>grunt unit-test</id>
                        <phase>test</phase>
                        <goals>
                            <goal>grunt</goal>
                        </goals>
                        <configuration>
                            <arguments>unit-test</arguments>
                        </configuration>
                    </execution>
                    <execution>
                        <id>grunt prepare-package</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>grunt</goal>
                        </goals>
                        <configuration>
                            <arguments>package</arguments>
                        </configuration>
                    </execution>
                </executions>
                <configuration>
                    <nodeVersion>v${node.version}</nodeVersion>
                    <yarnVersion>v${yarn.version}</yarnVersion>
                    -->
			<!-- <nodeDownloadRoot>http://albandrieu.com/html/download/nodejs/</nodeDownloadRoot>
                        <npmDownloadRoot>http://albandrieu.com/html/download/npm/-/</npmDownloadRoot>
                        <yarnDownloadRoot>http://albandrieu.com/html/download//yarn/</yarnDownloadRoot>   -->
			<!--<workingDirectory>./</workingDirectory>-->
			<!--
                    <srcdir>${basedir}/app</srcdir>
                    <outputdir>${project.build.directory}/dist</outputdir>
                    <triggerfiles>
                        <triggerfile>Gruntfile.js</triggerfile>
                        <triggerfile>package.json</triggerfile>
                    </triggerfiles>
                </configuration>
            </plugin>
            -->
			<!-- mvn gplus:generateStubs gplus:groovydoc -->
			<plugin>
				<groupId>org.codehaus.gmavenplus</groupId>
				<artifactId>gmavenplus-plugin</artifactId>
				<version>${maven.gmavenplus.plugin.version}</version>
				<executions>
					<execution>
						<phase>site</phase>
						<goals>
							<goal>generateStubs</goal>
							<goal>groovydoc</goal>
						</goals>
					</execution>
				</executions>
				<dependencies>
					<dependency>
						<groupId>org.codehaus.groovy</groupId>
						<artifactId>groovy-all</artifactId>
						<version>${groovy.version}</version>
						<scope>runtime</scope>
					</dependency>
				</dependencies>
				<configuration>
					<groovydocJavaSources>false</groovydocJavaSources>
					<groovydocOutputDirectory>${documentation.output.directory}/${groovydoc.directory.name}</groovydocOutputDirectory>
					<testGroovyDocOutputDirectory>${project.basedir}/target/site/testgapidocs</testGroovyDocOutputDirectory>
					<invokeDynamic>true</invokeDynamic>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-assembly-plugin</artifactId>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>single</goal>
						</goals>
						<configuration>
							<descriptorRefs>
								<!--<descriptorRef>config</descriptorRef>-->
								<descriptorRef>jar-with-dependencies</descriptorRef>
							</descriptorRefs>
							<descriptors>
								<descriptor>src/main/assembly/web-bundle.xml</descriptor>
							</descriptors>
							<archive>
								<addMavenDescriptor>false</addMavenDescriptor>
								<pomPropertiesFile>false</pomPropertiesFile>
								<manifest>
									<!--<addClasspath>true</addClasspath>-->
									<mainClass>com.test.project.sample.App</mainClass>
								</manifest>
								<manifestEntries>
									<Class-Path>WEB-INF/classes</Class-Path>
								</manifestEntries>
							</archive>
							<!--
							<archive>
								<manifestFile>${project.build.outputDirectory}/META-INF/MANIFEST.MF</manifestFile>
							</archive>
                            -->
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!--
			<plugin>
				<groupId>org.apache.felix</groupId>
				<artifactId>maven-bundle-plugin</artifactId>
				<version>${maven.bundle.plugin.version}</version>
				<extensions>true</extensions>
				<executions>
					<execution>
						<id>bundle-manifest</id>
						<phase>process-classes</phase>
						<goals>
							<goal>manifest</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<supportedProjectTypes>
						<supportedProjectType>war</supportedProjectType>
					</supportedProjectTypes>
					<instructions>
						<Import-Package>javax.servlet.jsp.*;version="[2.2.0,3.0)",org.eclipse.jetty.*;version="[$(version;===;${parsedVersion.osgiVersion}),$(version;==+;${parsedVersion.osgiVersion}))",*</Import-Package>
						<Export-Package>!com.test*</Export-Package>
						<Web-ContextPath>/</Web-ContextPath>
						<Bundle-ClassPath>.,WEB-INF/classes</Bundle-ClassPath>
					</instructions>
				</configuration>
			</plugin>
            -->
			<!-- also make this webapp an osgi bundle -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<version>${maven.war.plugin.version}</version>
				<configuration>
					<webResources>
						<resource>
							<directory>dist</directory>
						</resource>
					</webResources>
					<webApp>
						<contextPath>/test</contextPath>
					</webApp>
					<archive>
						<addMavenDescriptor>false</addMavenDescriptor>
						<pomPropertiesFile>false</pomPropertiesFile>
						<manifest>
							<addClasspath>true</addClasspath>
							<mainClass>com.test.project.sample.App</mainClass>
						</manifest>
						<!--<manifestFile>${project.build.outputDirectory}/META-INF/MANIFEST.MF</manifestFile>-->
					</archive>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.pitest</groupId>
				<artifactId>pitest-maven</artifactId>
				<version>${maven.pitest.plugin.version}</version>
			</plugin>
			<!-- for automatic running of integration tests with Jetty -->
			<!-- mvn org.codehaus.cargo:cargo-maven2-plugin:run -Dserver=jetty9x -->
			<plugin>
				<groupId>org.codehaus.cargo</groupId>
				<artifactId>cargo-maven3-plugin</artifactId>
				<version>${maven.cargo.maven3.plugin.version}</version>
				<configuration>
					<!--<skip>${maven.test.skip}</skip>-->
					<wait>${cargo.wait}</wait>
					<container>
						<!-- 5 minutes -->
						<timeout>300000</timeout>
						<containerId>${cargo.container}</containerId>
						<artifactInstaller>
							<groupId>org.eclipse.jetty</groupId>
							<artifactId>jetty-distribution</artifactId>
							<version>${server.version}</version>
						</artifactInstaller>
						<log>${project.build.directory}/cargo.log</log>
						<logLevel>debug</logLevel>
						<systemProperties>
							<!--<java.io.tmpdir>target/tmp</java.io.tmpdir>-->
							<log4j.debug>true</log4j.debug>
						</systemProperties>
						<!--
            <dependencies>
                <dependency>
                    <groupId>org.slf4j</groupId>
                    <artifactId>slf4j-api</artifactId>
                </dependency>
                <dependency>
                    <groupId>org.slf4j</groupId>
                    <artifactId>slf4j-log4j12</artifactId>
                </dependency>
                <dependency>
                    <groupId>log4j</groupId>
                    <artifactId>log4j</artifactId>
                </dependency>
            </dependencies>
            -->
					</container>
					<configuration>
						<properties>
							<!--							<cargo.protocol>${cargo.protocol}</cargo.protocol>-->
							<cargo.hostname>${cargo.host}</cargo.hostname>
							<cargo.servlet.port>${cargo.port}</cargo.servlet.port>
							<cargo.tomcat.manager.url>${deploy.url}</cargo.tomcat.manager.url>
							<cargo.remote.username>${cargo.remote.user}</cargo.remote.username>
							<cargo.remote.password>${cargo.remote.password}</cargo.remote.password>
							<cargo.logging>high</cargo.logging>
							<cargo.start.jvmargs><![CDATA[${cargo.jmx.activation} ${jacoco.agent}]]></cargo.start.jvmargs>
							<cargo.jetty.createContextXml>false</cargo.jetty.createContextXml>
							<!--<cargo.server.settings>jetty9x</cargo.server.settings>-->
						</properties>

						<configfiles>
							<configfile>
								<file>${project.basedir}/src/main/config/demo-base/etc</file>
								<todir>etc</todir>
							</configfile>
							<configfile>
								<file>${project.basedir}/src/main/config/demo-base/start.d</file>
								<todir>start.d</todir>
							</configfile>
							<configfile>
								<file>${project.basedir}/src/main/config/demo-base/webapps</file>
								<todir>webapps</todir>
							</configfile>
							<configfile>
								<file>${project.basedir}/src/main/config/demo-base/start.ini</file>
								<todir></todir>
							</configfile>
						</configfiles>
						<files>
							<configfile>
								<file>${project.basedir}/src/main/config/demo-base/etc/keystore</file>
								<todir>etc</todir>
								<configfile>false</configfile>
								<overwrite>true</overwrite>
							</configfile>
						</files>
					</configuration>
					<!--
          <deployables>
              <deployable>
                  <groupId>${project.groupId}</groupId>
                  <artifactId>${project.artifactId}</artifactId>
                  <type>war</type>
                  <properties>
                      <context>/test</context>
                  </properties>
                  <pingURL>${cargo.protocol}://${cargo.host}:${cargo.port}/</pingURL>
                  <pingTimeout>60000</pingTimeout>
              </deployable>
          </deployables>
          -->
				</configuration>
			</plugin>
			<!-- launch mvn clean install jetty:run-war -->
			<plugin>
				<groupId>org.eclipse.jetty</groupId>
				<artifactId>jetty-maven-plugin</artifactId>
				<version>${maven.jetty.eclipse.plugin.version}</version>
				<dependencies>
					<dependency>
						<groupId>org.eclipse.jetty</groupId>
						<artifactId>jetty-client</artifactId>
						<version>${jetty.version}</version>
					</dependency>
					<dependency>
						<groupId>org.eclipse.jetty</groupId>
						<artifactId>jetty-servlets</artifactId>
						<version>${jetty.version}</version>
					</dependency>
					<dependency>
						<groupId>org.eclipse.jetty</groupId>
						<artifactId>jetty-util</artifactId>
						<version>${jetty.version}</version>
					</dependency>
					<dependency>
						<groupId>org.eclipse.jetty</groupId>
						<artifactId>jetty-http</artifactId>
						<version>${jetty.version}</version>
					</dependency>
					<dependency>
						<groupId>org.eclipse.jetty</groupId>
						<artifactId>jetty-rewrite</artifactId>
						<version>${jetty.version}</version>
					</dependency>
				</dependencies>
				<configuration>
					<scanIntervalSeconds>10</scanIntervalSeconds>
					<!-- TODO <jettyConfig>src/main/etc/jetty.xml</jettyConfig> -->
					<httpConnector>
						<!--host>localhost</host -->
						<port>${jetty.port}</port>
					</httpConnector>
					<stopPort>${jetty.stop.port}</stopPort>
					<stopKey>STOP</stopKey>
					<!--
                    <systemProperties>
                        <systemProperty>
                            <name>fooprop</name>
                            <value>222</value>
                        </systemProperty>
                    </systemProperties>
                    -->
					<webApp>
						<contextPath>/test</contextPath>
						<tempDirectory>${project.build.directory}/work</tempDirectory>
						<!--
                        <sessionHandler implementation="org.eclipse.jetty.server.session.SessionHandler">
                            <sessionManager implementation="org.eclipse.jetty.server.session.HashSessionManager">
                                <storeDirectory>${basedir}/target/sessions</storeDirectory>
                            </sessionManager>
                        </sessionHandler>
                        -->
					</webApp>
				</configuration>
			</plugin>
			<!-- Allow this web application to be started with the command : 'mvn
                tomcat7:run' -->
			<plugin>
				<groupId>org.apache.tomcat.maven</groupId>
				<artifactId>tomcat7-maven-plugin</artifactId>
				<version>${maven.tomcat7.plugin.version}</version>
				<dependencies>
					<dependency>
						<groupId>${project.groupId}</groupId>
						<artifactId>${project.artifactId}</artifactId>
						<version>${project.version}</version>
						<type>war</type>
					</dependency>
					<!--
                    <dependency>
                        <groupId>${jdbc.groupId}</groupId>
                        <artifactId>${jdbc.client.artifactId}</artifactId>
                        <version>${jdbc.version}</version>
                        <scope>runtime</scope>
                    </dependency>
                    -->
				</dependencies>
				<configuration>
					<!-- http port -->
					<port>${tomcat.port}</port>
					<path>/test</path>
					<!--<contextFile>${basedir}/src/main/webapp/META-INF/context.xml</contextFile> -->
					<addWarDependenciesInClassloader>true</addWarDependenciesInClassloader>
					<!--
            <systemProperties>
                <java.security.auth.login.config>${basedir}/conf/jaas.config</java.security.auth.login.config>
            </systemProperties>
            -->
					<url>${deploy.url}</url>
					<username>${cargo.remote.user}</username>
					<password>${cargo.remote.password}</password>
					<addContextWarDependencies>true</addContextWarDependencies>
					<addWarDependenciesInClassloader>true</addWarDependenciesInClassloader>
					<!--<configurationDir>${basedir}</configurationDir> -->
					<!--<server>nabla-tomcat</server> -->
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<version>${maven.resources.plugin.version}</version>
				<!--$NO-MVN-MAN-VER$ -->
				<executions>
					<execution>
						<id>copy-files-on-build</id>
						<phase>validate</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.directory}/${project.build.finalName}/bower_components</outputDirectory>
							<resources>
								<resource>
									<!--<directory>${basedir}/bower_components/</directory>-->
									<directory>bower_components</directory>
									<!--<include>*.[MIME-TYPE]</include>-->
									<filtering>false</filtering>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!--
            <plugin>
                <groupId>com.sinapsi.memtracker</groupId>
                <artifactId>mem-tracker-maven-plugin</artifactId>
                <version>${maven.mem.tracker.maven.plugin.version}</version>
                <executions>
                    <execution>
                        <id>integration-test</id>
                        <phase>integration-test</phase>
                        <goals>
                            <goal>track</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <port>${cargo.monitoring.jmx.rmi.port}</port>
                </configuration>
            </plugin>
            -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<version>${maven.dependency.plugin.version}</version>
				<!--$NO-MVN-MAN-VER$ -->
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>copy</goal>
						</goals>
						<configuration>
							<artifactItems>
								<artifactItem>
									<groupId>org.eclipse.jetty</groupId>
									<artifactId>jetty-runner</artifactId>
									<version>${jetty.runner.version}</version>
									<destFileName>jetty-runner.jar</destFileName>
								</artifactItem>
							</artifactItems>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!--
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <version>${maven.shade.plugin.version}</version>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                        <configuration>
                            <transformers>
                                <transformer implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer"></transformer>
                                <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                                    <manifestEntries>
                                        <Main-Class>com.test.project.sample.App</Main-Class>
                                    </manifestEntries>
                                </transformer>
                            </transformers>
                        </configuration>
                    </execution>
                </executions>
                <configuration>
                    <createDependencyReducedPom>true</createDependencyReducedPom>
                    <filters>
                        <filter>
                            <artifact>*:*</artifact>
                            <excludes>
                                <exclude>META-INF/*.SF</exclude>
                                <exclude>META-INF/*.DSA</exclude>
                                <exclude>META-INF/*.RSA</exclude>
                            </excludes>
                        </filter>
                    </filters>
                </configuration>
            </plugin>
            -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-antrun-plugin</artifactId>
				<executions>
					<execution>
						<id>lcovFileForSonar</id>
						<phase>package</phase>
						<goals>
							<goal>run</goal>
						</goals>
						<configuration>
							<target>
								<echo message="Copying LCOV file lcov-karma.info for Sonar purpose to target directory"></echo>
								<copy flatten="true" todir="${basedir}/target">
									<fileset dir="${basedir}/target">
										<include name="karma-coverage/lcov-karma.info"></include>
									</fileset>
								</copy>
							</target>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- mvn jenkinsfile:validate -->
			<plugin>
				<groupId>com.andyserver.maven.plugins</groupId>
				<artifactId>jenkinsfile-maven-plugin</artifactId>
				<version>${maven.jenkinsfile.plugin.version}</version>
				<configuration>
					<server>${env.JENKINS_URL}</server>
					<username>${env.JENKINS_USER}</username>
					<password>${env.JENKINS_USER_TOKEN}</password>
				</configuration>
			</plugin>
			<!--
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>${maven.spring.boot.plugin.version}</version>
                <configuration>
                  <excludes>
                    <exclude>
                      <groupId>org.projectlombok</groupId>
                      <artifactId>lombok</artifactId>
                    </exclude>
                    <exclude>
                      <groupId>org.springframework.boot</groupId>
                      <artifactId>spring-boot-configuration-processor</artifactId>
                    </exclude>
                  </excludes>
                </configuration>
            </plugin>
            <plugin>
              <groupId>org.openapitools</groupId>
              <artifactId>openapi-generator-maven-plugin</artifactId>
              <version>${maven.openapi.generator.plugin.version}</version>
              <executions>
                <execution>
                  <goals>
                    <goal>generate</goal>
                  </goals>
                  <configuration>-->
			<!--<inputSpec>${project.basedir}/src/main/resources/client/api.yaml</inputSpec>-->
			<!--
                    <inputSpec>${project.basedir}/src/main/resources/public/api.yaml</inputSpec>-->
			<!--<generatorName>java</generatorName>-->
			<!--
                    <generatorName>spring</generatorName>
                    <configOptions>
                       <sourceFolder>src/generated/java/main</sourceFolder>
                                     <java8>true</java8>
                                     <dateLibrary>java8</dateLibrary>
                                     <interfaceOnly>true</interfaceOnly>
                                     <apiPackage>com.test.project.sample.client.rest.api</apiPackage>
                                     <modelPackage>com.test.project.sample.client.rest.model</modelPackage>
                                     <configPackage>com.test.project.sample.client.rest.configuration</configPackage>-->
			<!--<library>spring-cloud</library>-->
			<!--
                    </configOptions>
                  </configuration>
                </execution>
              </executions>
            </plugin>
            -->
			<plugin>
				<groupId>external.atlassian.jgitflow</groupId>
				<artifactId>jgitflow-maven-plugin</artifactId>
				<version>${maven.jgitflow.plugin.version}</version>
				<configuration>
					<flowInitContext>
						<masterBranchName>master</masterBranchName>
						<developBranchName>develop</developBranchName>
						<featureBranchPrefix>feature/</featureBranchPrefix>
						<releaseBranchPrefix>release/</releaseBranchPrefix>
						<hotfixBranchPrefix>hotfix/</hotfixBranchPrefix>
						<versionTagPrefix>version/</versionTagPrefix>
					</flowInitContext>
					<noDeploy>true</noDeploy>
					<squash>true</squash>

					<pullDevelop>false</pullDevelop>
					<scmCommentPrefix>[RELEASE]</scmCommentPrefix>

					<!-- Enable this to push to origin using SSH keys -->
					<enableSshAgent>true</enableSshAgent>
					<!-- Keep your maven submodules at the same version as the parent POM -->
					<autoVersionSubmodules>true</autoVersionSubmodules>
					<!--
                      Pusing in-development features to origin allows all devs to see what each other
                      are working on
                    -->
					<pushFeatures>false</pushFeatures>
					<!--
                      This allows the CI server (e.g. Jenkins) to automatically push new releases to
                      origin; you can then either manually deploy them or, if you are doing Continuous
                      Deployments, auto-deploy them to prod
                    -->
					<pushReleases>false</pushReleases>
					<!--
                      Hot Fixes should be pushed to origin as well so that any dev can pick them up
                    -->
					<pushHotfixes>false</pushHotfixes>
					<allowSnapshots>true</allowSnapshots>
					<alwaysUpdateOrigin>false</alwaysUpdateOrigin>
					<pullMaster>false</pullMaster>
				</configuration>
			</plugin>
		</plugins>
	</build>

	<profiles>

		<!-- mvn clean install jfx:native -Pjavafx
        <profile>
            <id>javafx</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>com.zenjava</groupId>
                        <artifactId>javafx-maven-plugin</artifactId>
                        <version>${maven.javafx.plugin.version}</version>
                        <configuration>
                            <mainClass>com.almonde.WSEntryPoint</mainClass>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
            <dependencies>
                <dependency>
                  <groupId>com.oracle</groupId>
                  <artifactId>javafx</artifactId>
                  <version>${com.oracle.javafx.version}</version>
                  <scope>system</scope>
                  <systemPath>${project.basedir}/lib/jfxrt.jar</systemPath>
                  <optional>true</optional>
                </dependency>
            </dependencies>
        </profile>
        -->
		<profile>
			<id>config</id>
			<activation>
				<file>
					<exists>src/main/config</exists>
				</file>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-assembly-plugin</artifactId>
						<executions>
							<execution>
								<phase>package</phase>
								<goals>
									<goal>single</goal>
								</goals>
								<configuration>
									<descriptorRefs>
										<descriptorRef>config</descriptorRef>
									</descriptorRefs>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>sonar</id>
			<activation>
				<property>
					<name>!profile.activation</name>
				</property>
			</activation>
			<properties>
				<sonar.sources>src/main,app</sonar.sources>
				<sonar.tests>src/test,test</sonar.tests>
			</properties>
		</profile>
		<profile>
			<id>docker</id>
			<!--
            <modules>
                <module>docker</module>
            </modules>
            -->
			<activation>
				<property>
					<name>docker</name>
				</property>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>io.fabric8</groupId>
						<artifactId>docker-maven-plugin</artifactId>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>run-integration-test</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.cargo</groupId>
						<artifactId>cargo-maven3-plugin</artifactId>
						<version>${maven.cargo.maven3.plugin.version}</version>
						<executions>
							<execution>
								<id>start-container-integration-test</id>
								<phase>pre-integration-test</phase>
								<goals>
									<goal>start</goal>
								</goals>
								<configuration>
									<timeout>240000</timeout>
								</configuration>
							</execution>
							<execution>
								<id>stop-container-integration-test</id>
								<phase>post-integration-test</phase>
								<goals>
									<goal>stop</goal>
								</goals>
							</execution>
						</executions>
						<inherited>true</inherited>
						<configuration>
							<properties>
								<cargo.tomcat.manager.url>${deploy.url}</cargo.tomcat.manager.url>
								<cargo.remote.username>${cargo.remote.user}</cargo.remote.username>
								<cargo.remote.password>${cargo.remote.password}</cargo.remote.password>
								<cargo.logging>high</cargo.logging>
								<!-- <cargo.start.jvmargs><![CDATA[${jacoco.agent} ${cargo.jmx.activation}]]></cargo.start.jvmargs> -->
								<!-- -agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005 -->
								<cargo.jetty.createContextXml>false</cargo.jetty.createContextXml>
							</properties>
							<!--
              <container>
                  <timeout>300000</timeout>
                  <containerId>${cargo.container}</containerId>
                  <artifactInstaller>
                      <groupId>org.eclipse.jetty</groupId>
                      <artifactId>jetty-distribution</artifactId>
                      <version>${server.version}</version>
                  </artifactInstaller>
              </container>
              -->
							<configuration>
								<type>${cargo.configuration.type}</type>
								<properties>
									<cargo.hostname>${cargo.host}</cargo.hostname>
									<cargo.servlet.port>${cargo.port}</cargo.servlet.port>
									<cargo.logging>high</cargo.logging>
								</properties>
							</configuration>
						</configuration>
					</plugin>
					<!-- DISABLE because it is too slow mvnw dependency-check:check
					<plugin>
						<groupId>org.owasp</groupId>
						<artifactId>dependency-check-maven</artifactId>
						<version>${maven.dependency.check.plugin.version}</version>
						<executions>
							<execution>
								<phase>compile</phase>
								<goals>
									<goal>check</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<format>XML</format>
							<skipProvidedScope>true</skipProvidedScope>
							<skipRuntimeScope>true</skipRuntimeScope>
							<skipSystemScope>true</skipSystemScope>
							<assemblyAnalyzerEnabled>false</assemblyAnalyzerEnabled>
						</configuration>
					</plugin>
          -->
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<version>${maven.exec.plugin.version}</version>
						<executions>
							<execution>
								<id>exec-grunt-integration-test</id>
								<phase>integration-test</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<executable>grunt</executable>
									<arguments>
										<argument>integration-test</argument>
									</arguments>
								</configuration>
							</execution>
						</executions>
						<configuration>
							<skip>${maven.exec.skip}</skip>
							<environmentVariables>
								<NPM_CONFIG_PREFIX>${basedir}/npm</NPM_CONFIG_PREFIX>
								<NPM_CONFIG_CACHE>${NPM_CONFIG_PREFIX}/cache</NPM_CONFIG_CACHE>
								<NPM_CONFIG_TMP>${project.build.directory}/npmtmp</NPM_CONFIG_TMP>
							</environmentVariables>
						</configuration>
					</plugin>
					<!--
                    <plugin>
                        <groupId>com.github.eirslett</groupId>
                        <artifactId>frontend-maven-plugin</artifactId>
                        <version>${maven.frontend.plugin.version}</version>
                        <executions>
                            <execution>
                                <id>grunt integration-test</id>
                                <phase>integration-test</phase>
                                <goals>
                                    <goal>grunt</goal>
                                </goals>
                                <configuration>
                                    <arguments>integration-test</arguments>
                                </configuration>
                            </execution>
                        </executions>
                        <configuration>
                            <nodeVersion>${node.version}</nodeVersion>
                            <yarnVersion>v${yarn.version}</yarnVersion>
                            <workingDirectory>./</workingDirectory>
                        </configuration>
                    </plugin>
                    -->
				</plugins>
			</build>
		</profile>
		<profile>
			<id>jetty9x</id>
			<activation>
				<property>
					<name>!profile.activation</name>
					<!--
					<name>server</name>
					<value>jetty9x</value>
					 -->
				</property>
			</activation>
			<properties>
				<cargo.configuration.type>standalone</cargo.configuration.type>
				<cargo.container>jetty9x</cargo.container>
				<cargo.container.home>${project.build.directory}/jetty</cargo.container.home>
				<!--<cargo.container.url>TODOjetty9</cargo.container.url> -->
				<cargo.container.type>installed</cargo.container.type>
				<cargo.deployables.type></cargo.deployables.type>
				<cargo.jmx.activation>${cargo.jetty.jmx.activation}</cargo.jmx.activation>
				<cargo.port>${jetty.port}</cargo.port>
				<datasource>${datasource.name}</datasource>
				<jetty.version>${jetty9.version}</jetty.version>
				<scope.tomcat.never.type>${scope.provided}</scope.tomcat.never.type>
				<scope.tomcat.only.type>${scope.compile}</scope.tomcat.only.type>
				<scope.type>${scope.compile}</scope.type>
				<server.home></server.home>
				<server.name>${product.name}</server.name>
				<server.port></server.port>
				<server.version>${jetty.version}</server.version>
			</properties>
			<dependencies>
				<!-- http://blog.anvard.org/articles/2013/10/06/jetty-proxy-servlet.html -->
				<!-- https://github.com/mdeimel/jetty-proxy -->
				<dependency>
					<groupId>org.eclipse.jetty</groupId>
					<artifactId>jetty-proxy</artifactId>
					<version>${jetty.version}</version>
					<scope>compile</scope>
				</dependency>
				<dependency>
					<groupId>org.eclipse.jetty</groupId>
					<artifactId>jetty-server</artifactId>
					<version>${jetty.version}</version>
				</dependency>
				<dependency>
					<groupId>org.eclipse.jetty</groupId>
					<artifactId>jetty-servlet</artifactId>
					<version>${jetty.version}</version>
				</dependency>
				<dependency>
					<groupId>org.eclipse.jetty</groupId>
					<artifactId>jetty-continuation</artifactId>
					<version>${jetty.version}</version>
				</dependency>
				<dependency>
					<groupId>org.eclipse.jetty</groupId>
					<artifactId>jetty-util</artifactId>
					<version>${jetty.version}</version>
				</dependency>
				<dependency>
					<groupId>org.eclipse.jetty</groupId>
					<artifactId>jetty-http</artifactId>
					<version>${jetty.version}</version>
					<type>jar</type>
					<scope>runtime</scope>
				</dependency>
				<dependency>
					<groupId>org.eclipse.jetty</groupId>
					<artifactId>jetty-rewrite</artifactId>
					<version>${jetty.version}</version>
					<type>jar</type>
					<scope>runtime</scope>
				</dependency>
				<dependency>
					<groupId>org.eclipse.jetty</groupId>
					<artifactId>jetty-servlets</artifactId>
					<version>${jetty.version}</version>
					<type>jar</type>
					<scope>runtime</scope>
				</dependency>
			</dependencies>
		</profile>
		<profile>
			<id>logback</id>
			<dependencies>
				<dependency>
					<groupId>ch.qos.logback</groupId>
					<artifactId>logback-classic</artifactId>
					<version>${logback.version}</version>
					<!--$NO-MVN-MAN-VER$-->
					<scope>runtime</scope>
					<exclusions>
						<!-- circular dependency -->
						<exclusion>
							<artifactId>slf4j-api</artifactId>
							<groupId>org.slf4j</groupId>
						</exclusion>
					</exclusions>
				</dependency>
				<dependency>
					<groupId>ch.qos.logback</groupId>
					<artifactId>logback-core</artifactId>
					<version>${logback.version}</version>
					<scope>runtime</scope>
				</dependency>
			</dependencies>
		</profile>
		<profile>
			<id>log4j</id>
			<activation>
				<property>
					<name>!profile.activation</name>
				</property>
			</activation>
			<dependencies>
				<dependency>
					<groupId>org.slf4j</groupId>
					<artifactId>slf4j-log4j12</artifactId>
					<version>${slf4j.version}</version>
					<!--$NO-MVN-MAN-VER$-->
					<scope>runtime</scope>
					<exclusions>
						<!-- circular dependency -->
						<exclusion>
							<artifactId>slf4j-api</artifactId>
							<groupId>org.slf4j</groupId>
						</exclusion>
					</exclusions>
				</dependency>
				<dependency>
					<groupId>org.apache.logging.log4j</groupId>
					<artifactId>log4j-core</artifactId>
					<version>${log4j.core.version}</version>
					<scope>runtime</scope>
				</dependency>
			</dependencies>
		</profile>
	</profiles>
</project>
