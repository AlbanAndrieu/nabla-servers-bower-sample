<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

    <modelVersion>4.0.0</modelVersion>
    <!-- @version $Revision: $ $Date: $ $Author: $ $State: $ -->
    <!-- @formatter:off -->
    <parent>
        <artifactId>sample</artifactId>
        <groupId>com.nabla.project.servers.sample</groupId>
        <version>1.0.1-SNAPSHOT</version>
    </parent>

    <artifactId>bower-sample</artifactId>
    <packaging>war</packaging>
    <name>Nabla Bower Sample</name>
    <description>Bower sample components</description>
    <url>https://github.com/AlbanAndrieu/nabla-servers-bower-sample</url>

    <scm>
        <connection>scm:git:git://github.com/AlbanAndrieu/nabla-servers-bower-sample.git</connection>
        <developerConnection>scm:git:git@github.com:AlbanAndrieu/nabla-servers-bower-sample.git</developerConnection>
        <tag>HEAD</tag>
        <url>https://github.com/AlbanAndrieu/nabla-servers-bower-sample</url>
    </scm>
    <issueManagement>
        <system>GitHub Issues</system>
        <url>https://github.com/AlbanAndrieu/nabla-servers-bower/issues</url>
    </issueManagement>
    <ciManagement>
        <system>Jenkins</system>
        <url>${JOB_URL}</url>
    </ciManagement>
    <!--TODO see jetty demo-base code at https://github.com/eclipse/jetty.project/blob/master/tests/test-webapps/test-jetty-webapp/pom.xml -->
    <properties>
        <maven.frontend.plugin.version>1.6</maven.frontend.plugin.version>
        <maven.cargo.maven2.plugin.version>1.6.5</maven.cargo.maven2.plugin.version>
        <maven.gmavenplus.plugin.version>1.5</maven.gmavenplus.plugin.version>
        <node.version>9.3.0</node.version><!-- FreeNas -->
        <!--<node.version>8.9.3</node.version> NOK -->
        <!--<node.version>7.8.0</node.version> Ubuntu -->
        <npm.version>5.6.0</npm.version>
        <yarn.version>1.3.2</yarn.version>
        <!--
        <jersey.version>2.21</jersey.version>
        <jersey.bom.version>${jersey.version}</jersey.bom.version>
        -->
        <!--
        <javax.ws.rs-api.version>2.0</javax.ws.rs-api.version>
        <validation.api.version>1.1.0.Final</validation.api.version>
        -->
        <!--
        <logback.version>1.0.13</logback.version>
        <slf4j.version>1.7.13</slf4j.version>
        -->
        <!--<jetty9.version>9.3.22.v20171030</jetty9.version> NOK-->
        <jetty9.version>9.2.3.v20140905</jetty9.version>
        <jetty.ssl.port>9443</jetty.ssl.port>
        <!-- 9443 is used by zap see jetty-ssl.xml in src/main/config/demo-base/etc -->
        <cargo.protocol>http</cargo.protocol>
        <cargo.monitoring.jmx.rmi.port>10088</cargo.monitoring.jmx.rmi.port>
        <jetty.jmxremote.rmihost>localhost</jetty.jmxremote.rmihost>
        <jetty.jmxremote.rmiport>3099</jetty.jmxremote.rmiport>
        <cargo.jetty.jmx.activation><![CDATA[-Dcom.sun.management.jmxremote=true
-Dcom.sun.management.jmxremote.ssl=false
-Dcom.sun.management.jmxremote.authenticate=false
-Dcom.sun.management.jmxremote.port=${cargo.monitoring.jmx.rmi.port}
-Djetty.jmxrmihost=${jetty.jmxremote.rmihost}
-Djetty.jmxrmiport=${jetty.jmxremote.rmiport}]]></cargo.jetty.jmx.activation>
        <cargo.jmx.activation>${cargo.jetty.jmx.activation}</cargo.jmx.activation>
        <documentation.output.directory>${basedir}/docs</documentation.output.directory>
        <groovydoc.directory.name>groovydocs</groovydoc.directory.name>
        <guava.version>23.3-jre</guava.version>
        <guice.version>4.1.0</guice.version>
    </properties>
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.glassfish.jersey</groupId>
                <artifactId>jersey-bom</artifactId>
                <version>${jersey.bom.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>
    <dependencies>
        <!--
        <dependency>
                <groupId>com.sun.faces</groupId>
                <artifactId>jsf-api</artifactId>
                <scope>${scope.tomcat.never.type}</scope>
        </dependency>
        <dependency>
                <groupId>com.sun.faces</groupId>
                <artifactId>jsf-impl</artifactId>
                <scope>${scope.tomcat.never.type}</scope>
        </dependency>
        -->
        <dependency>
            <groupId>org.glassfish.jersey.core</groupId>
            <artifactId>jersey-server</artifactId>
        </dependency>
        <dependency>
            <groupId>org.glassfish.jersey.containers</groupId>
            <artifactId>jersey-container-servlet-core</artifactId>
        </dependency>
        <dependency>
            <groupId>org.glassfish.jersey.containers</groupId>
            <artifactId>jersey-container-jetty-http</artifactId>
        </dependency>
        <dependency>
            <groupId>org.glassfish.jersey.media</groupId>
            <artifactId>jersey-media-moxy</artifactId>
        </dependency>
        <!--  Jersey Client required for test *and runtime* due to Jersey bug : https://java.net/jira/browse/JERSEY-2104 -->
        <!-- This dependency can be scoped to test when Jersey is upgraded to >=2.4 -->
        <dependency>
            <groupId>org.glassfish.jersey.core</groupId>
            <artifactId>jersey-client</artifactId>
            <!--<scope>test</scope> -->
        </dependency>
        <dependency>
            <groupId>org.codehaus.groovy</groupId>
            <artifactId>groovy-all</artifactId>
            <version>${groovy.version}</version>
            <!--<scope>test</scope> -->
        </dependency>
        <dependency>
            <groupId>org.codehaus.groovy.modules.http-builder</groupId>
            <artifactId>http-builder</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <exclusions>
                <!-- circular dependency -->
                <exclusion>
                    <artifactId>logback-classic</artifactId>
                    <groupId>ch.qos.logback</groupId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <scope>provided</scope>
            <!-- javax.servlet-api-3.0.1.jar Offending class javax/servlet/Servlet.class  in Tomcat -->
        </dependency>
        <dependency>
            <groupId>com.google.code.findbugs</groupId>
            <artifactId>jsr305</artifactId>
            <optional>true</optional>
            <!-- needed only for annotations -->
        </dependency>
        <!-- test dependencies -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <scope>test</scope>
        </dependency>
        <!-- jmockit musr be after junit in the classpath -->
        <dependency>
            <groupId>org.jmockit</groupId>
            <artifactId>jmockit</artifactId>
            <scope>test</scope>
        </dependency>
        <!-- this is just one of the appsensor dependencies you'll need - see step
            below called pluggable components
        <dependency>
            <groupId>org.owasp.appsensor</groupId>
            <artifactId>appsensor-core</artifactId>
            <version>${appsensor.core.version}</version>
            <exclusions>
                <exclusion>
                    <groupId>javax.inject</groupId>
                    <artifactId>javax.inject</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>aopalliance</groupId>
                    <artifactId>aopalliance</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>ch.qos.logback</groupId>
                    <artifactId>logback-classic</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>ch.qos.logback</groupId>
                    <artifactId>logback-core</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        -->
    </dependencies>
    <build>
        <!--
        <sourceDirectory>app</sourceDirectory>
        <testSourceDirectory>test</testSourceDirectory>
        -->
        <finalName>test</finalName>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-assembly-plugin</artifactId>
                    <dependencies>
                        <dependency>
                            <groupId>org.eclipse.jetty.toolchain</groupId>
                            <artifactId>jetty-assembly-descriptors</artifactId>
                            <version>1.0</version>
                        </dependency>
                    </dependencies>
                </plugin>
                <plugin>
                    <groupId>org.owasp</groupId>
                    <artifactId>dependency-check-maven</artifactId>
                    <version>${maven.dependency.check.plugin.version}</version>
                    <configuration>
                        <format>XML</format>
                        <skipProvidedScope>true</skipProvidedScope>
                        <skipRuntimeScope>true</skipRuntimeScope>
                        <skipSystemScope>true</skipSystemScope>
                        <assemblyAnalyzerEnabled>false</assemblyAnalyzerEnabled>
                        <cveUrl12Modified>https://kgrdb01/download/nist/nvdcve-Modified.xml.gz</cveUrl12Modified>
                        <cveUrl20Modified>https://kgrdb01/download/nist/nvdcve-2.0-Modified.xml.gz</cveUrl20Modified>
                        <cveUrl12Base>https://kgrdb01/download/nist/nvdcve-%d.xml</cveUrl12Base>
                        <cveUrl20Base>https://kgrdb01/download/nist/nvdcve-2.0-%d.xml</cveUrl20Base>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-clean-plugin</artifactId>
                <version>${maven.clean.plugin.version}</version>
                <configuration>
                    <filesets>
                        <fileset>
                            <directory>${project.basedir}</directory>
                            <includes>
                                <!--
                                <include>.bower/</include>
                                <include>.node_cache/</include>
                                <include>.node_tmp/</include>
                                <include>.tmp/</include>
                                <include>.sass-cache/</include>
                                <include>node_modules/</include>
                                <include>node/</include>
                                <include>bower_components/</include>
                                -->
                                <include>lib/</include>
                                <include>docs/</include>
                                <include>dist/</include>
                                <!--<include>build/</include> -->
                            </includes>
                            <excludes>
                                <!-- Allow mvn clean install > install.log -->
                                <exclude>**/build.log</exclude>
                                <exclude>**/install.log</exclude>
                            </excludes>
                            <followSymlinks>false</followSymlinks>
                        </fileset>
                    </filesets>
                </configuration>
            </plugin>
            <plugin>
                <groupId>com.sebastian-daschner</groupId>
                <artifactId>jaxrs-analyzer-maven-plugin</artifactId>
                <version>${maven.jaxrs.analyzer.plugin.version}</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>analyze-jaxrs</goal>
                        </goals>
                        <configuration>
                            <backend>plaintext</backend>
                            <deployedDomain>localhost</deployedDomain>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
           <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>exec-npm-install</id>
                        <phase>generate-sources</phase>
                        <configuration>
                            <executable>npm</executable>
                            <arguments>
                                <argument>install</argument>
                            </arguments>
                        </configuration>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>exec-bower-install</id>
                        <phase>generate-sources</phase>
                        <configuration>
                            <executable>bower</executable>
                            <arguments>
                                <argument>install</argument>
                            </arguments>
                        </configuration>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>exec-grunt-prepare</id>
                        <phase>generate-resources</phase>
                        <configuration>
							<executable>grunt</executable>
                            <arguments>prepare</arguments>
                        </configuration>
                        <goals>
                            <goal>exec</goal>
                        </goals>                        
                    </execution>                    
                    <execution>
                        <id>exec-grunt-check</id>
                        <phase>process-resources</phase>
                        <configuration>
                            <executable>grunt</executable>
                            <arguments>
                                <argument>check</argument>
                            </arguments>
                        </configuration>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                    </execution>
                    <!--
                    <execution>
                        <id>exec-grunt-default</id>
                        <phase>process-resources</phase>
                        <configuration>
                            <executable>grunt</executable>
                            <arguments>
                                <argument>default</argument>
                            </arguments>
                        </configuration>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                    </execution>
                    -->
                    <execution>
                        <id>exec-grunt-default</id>
                        <phase>compile</phase>
                        <configuration>
                            <executable>grunt</executable>
                            <arguments>
                                <argument>default</argument>
                            </arguments>
                        </configuration>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>exec-grunt-unit-test</id>
                        <phase>test</phase>
                        <configuration>
                            <executable>grunt</executable>
                            <arguments>
								<argument>unit-test</argument>
								<argument>--skipTests=${maven.test.skip}</argument>                            
                            </arguments>
                        </configuration>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>exec-grunt-package</id>
                        <phase>package</phase>
                        <configuration>
                            <executable>grunt</executable>
                            <arguments>package</arguments>
                        </configuration>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <!--
            <plugin>
                <groupId>com.github.eirslett</groupId>
                <artifactId>frontend-maven-plugin</artifactId>
                <version>${maven.frontend.plugin.version}</version>
                <executions>
					-->
                    <!--install \-\-no-optional 
                    <execution>
                        <id>install node and npm</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>install-node-and-npm</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>npm install</id>
                        <phase>process-sources</phase>
                        <goals>
                            <goal>npm</goal>
                        </goals>
                        <configuration>
                            <arguments>install</arguments>
                        </configuration>
                    </execution>
                    -->
                    <!--
                    <execution>
                        <id>install node and yarn</id>
                        <phase>validate</phase>
                        <goals>
                            <goal>install-node-and-yarn</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>yarn install</id>
                        <phase>initialize</phase>
                        <goals>
                            <goal>yarn</goal>
                        </goals>
                        <configuration>
                            <arguments>install</arguments>
                        </configuration>
                    </execution>
                    -->
                    <!--
                    <execution>
                        <id>grunt prepare</id>
                        <phase>generate-resources</phase>
                        <goals>
                            <goal>grunt</goal>
                        </goals>
                        <configuration>
                            <arguments>prepare</arguments>
                        </configuration>
                    </execution>
                    <execution>
                        <id>grunt check</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>grunt</goal>
                        </goals>
                        <configuration>
                            <arguments>check</arguments>
                        </configuration>
                    </execution>
                    <execution>
                        <id>grunt unit-test</id>
                        <phase>test</phase>
                        <goals>
                            <goal>grunt</goal>
                        </goals>
                        <configuration>
                            <arguments>unit-test</arguments>
                        </configuration>
                    </execution>
                    <execution>
                        <id>grunt prepare-package</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>grunt</goal>
                        </goals>
                        <configuration>
                            <arguments>package</arguments>
                        </configuration>
                    </execution>
                </executions>
                <configuration>
                    <nodeVersion>v${node.version}</nodeVersion>
                    <yarnVersion>v${yarn.version}</yarnVersion>
                    -->
                    <!-- <nodeDownloadRoot>http://home.nabla.mobi/html/download/nodejs/</nodeDownloadRoot>
                        <npmDownloadRoot>http://home.nabla.mobi/html/download/npm/-/</npmDownloadRoot>
                        <yarnDownloadRoot>http://home.nabla.mobi/html/download//yarn/</yarnDownloadRoot>   -->
                    <!--<workingDirectory>./</workingDirectory>-->
                    <!--
                    <srcdir>${basedir}/app</srcdir>
                    <outputdir>${project.build.directory}/dist</outputdir>
                    <triggerfiles>
                        <triggerfile>Gruntfile.js</triggerfile>
                        <triggerfile>package.json</triggerfile>
                    </triggerfiles>
                </configuration>
            </plugin>
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-assembly-plugin</artifactId>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>single</goal>
                        </goals>
                        <configuration>
                            <descriptorRefs>
                                <descriptorRef>config</descriptorRef>
                            </descriptorRefs>
                            <descriptors>
                                <descriptor>src/main/assembly/web-bundle.xml</descriptor>
                            </descriptors>
                            <archive>
                                <manifestFile>${project.build.outputDirectory}/META-INF/MANIFEST.MF</manifestFile>
                            </archive>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>build-helper-maven-plugin</artifactId>
                <version>${maven.build.helper.plugin.version}</version>
                <executions>
                    <execution>
                        <id>set-osgi-version</id>
                        <phase>validate</phase>
                        <goals>
                            <goal>parse-version</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.felix</groupId>
                <artifactId>maven-bundle-plugin</artifactId>
                <version>${maven.bundle.plugin.version}</version>
                <extensions>true</extensions>
                <executions>
                    <execution>
                        <id>bundle-manifest</id>
                        <phase>process-classes</phase>
                        <goals>
                            <goal>manifest</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <supportedProjectTypes>
                        <supportedProjectType>war</supportedProjectType>
                    </supportedProjectTypes>
                    <instructions>
                        <Import-Package>javax.servlet.jsp.*;version="[2.2.0,3.0)",org.eclipse.jetty.*;version="[$(version;===;${parsedVersion.osgiVersion}),$(version;==+;${parsedVersion.osgiVersion}))",*</Import-Package>
                        <Export-Package>!com.test*</Export-Package>
                        <!-- the test webapp is configured via a jetty xml file
                        in order to add the security handler. -->
                        <Web-ContextPath>/</Web-ContextPath>
                        <!-- in fact the '.' must not be there
                        but Felix-BND has a bug:
                        http://www.mail-archive.com/users@felix.apache.org/msg04730.html
                        https://issues.apache.org/jira/browse/FELIX-1571
                        -->
                        <Bundle-ClassPath>.,WEB-INF/classes</Bundle-ClassPath>
                    </instructions>
                </configuration>
            </plugin>
            <!-- also make this webapp an osgi bundle -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <configuration>
                    <webResources>
                        <resource>
                            <directory>dist</directory>
                        </resource>
                    </webResources>
                    <webApp>
                        <contextPath>/test</contextPath>
                    </webApp>
                    <archive>
                        <addMavenDescriptor>false</addMavenDescriptor>
                        <pomPropertiesFile>false</pomPropertiesFile>
                        <manifestFile>${project.build.outputDirectory}/META-INF/MANIFEST.MF</manifestFile>
                    </archive>
                </configuration>
            </plugin>
            <!-- for automatic running of integration tests with Jetty -->
            <!-- mvn clean install org.codehaus.cargo:cargo-maven2-plugin:run -Dserver=jetty9x -->
            <!--
            <plugin>
                <groupId>org.codehaus.cargo</groupId>
                <artifactId>cargo-maven2-plugin</artifactId>
                <version>${maven.cargo.maven2.plugin.version}</version>
                <executions>
                    <execution>
                        <id>start-container-overrided</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>start</goal>
                        </goals>
                        <configuration>
                            <timeout>240000</timeout>
                        </configuration>
                    </execution>
                    <execution>
                        <id>stop-container-overrided</id>
                        <phase>post-integration-test</phase>
                        <goals>
                            <goal>stop</goal>
                        </goals>
                        <configuration>
                            <timeout>60000</timeout>
                        </configuration>
                    </execution>
                </executions>
                <configuration>
                    <wait>${cargo.wait}</wait>
                    <container>
                        <timeout>300000</timeout>
                        <log>${project.build.directory}/cargo.log</log>
                        <logLevel>debug</logLevel>
                        <systemProperties>
                            <log4j.debug>true</log4j.debug>
                        </systemProperties>
                        <dependencies>
                            <dependency>
                                <groupId>org.slf4j</groupId>
                                <artifactId>slf4j-api</artifactId>
                            </dependency>
                            <dependency>
                                <groupId>org.slf4j</groupId>
                                <artifactId>slf4j-log4j12</artifactId>
                            </dependency>
                            <dependency>
                                <groupId>log4j</groupId>
                                <artifactId>log4j</artifactId>
                            </dependency>
                        </dependencies>
                    </container>
                    <configuration>
                        <properties>
                            <cargo.hostname>${cargo.host}</cargo.hostname>
                            <cargo.servlet.port>${cargo.port}</cargo.servlet.port>
                            <cargo.tomcat.manager.url>${deploy.url}</cargo.tomcat.manager.url>
                            <cargo.remote.username>${cargo.remote.user}</cargo.remote.username>
                            <cargo.remote.password>${cargo.remote.password}</cargo.remote.password>
                            <cargo.logging>high</cargo.logging>
                            <cargo.start.jvmargs><![CDATA[${jacoco.agent} ${cargo.jmx.activation}]]></cargo.start.jvmargs>
                            <cargo.jetty.createContextXml>false</cargo.jetty.createContextXml>
                        </properties>
                        <configfiles>
                            <configfile>
                                <file>${project.basedir}/src/main/config/demo-base/etc</file>
                                <todir>etc</todir>
                            </configfile>
                            <configfile>
                                <file>${project.basedir}/src/main/config/demo-base/start.d</file>
                                <todir>start.d</todir>
                            </configfile>
                            <configfile>
                                <file>${project.basedir}/src/main/config/demo-base/webapps</file>
                                <todir>webapps</todir>
                            </configfile>
                            <configfile>
                                <file>${project.basedir}/src/main/config/demo-base/start.ini</file>
                                <todir></todir>
                            </configfile>
                        </configfiles>
                        <files>
                            <configfile>
                                <file>${project.basedir}/src/main/config/demo-base/keystore</file>
                                <todir>etc</todir>
                                <configfile>false</configfile>
                                <overwrite>true</overwrite>
                            </configfile>
                        </files>
                    </configuration>
                    <deployables>
                        <deployable>
                            <groupId>${project.groupId}</groupId>
                            <artifactId>${project.artifactId}</artifactId>
                            <type>war</type>
                            <properties>
                                <context>/test</context>
                            </properties>
                            <pingURL>${cargo.protocol}://${cargo.host}:${cargo.port}/</pingURL>
                            <pingTimeout>60000</pingTimeout>
                        </deployable>
                    </deployables>
                    <container>
                        <timeout>300000</timeout>
                        <containerId>${cargo.container}</containerId>
                        <artifactInstaller>
                            <groupId>org.eclipse.jetty</groupId>
                            <artifactId>jetty-distribution</artifactId>
                            <version>${server.version}</version>
                        </artifactInstaller>
                    </container>
                </configuration>
            </plugin>
            -->
            <!-- launch mvn clean install jetty:run-war -->
            <plugin>
                <groupId>org.eclipse.jetty</groupId>
                <artifactId>jetty-maven-plugin</artifactId>
                <version>${maven.jetty.eclipse.plugin.version}</version>
                <dependencies>
                    <dependency>
                        <groupId>org.eclipse.jetty</groupId>
                        <artifactId>jetty-client</artifactId>
                        <version>${jetty.version}</version>
                    </dependency>
                    <dependency>
                        <groupId>org.eclipse.jetty</groupId>
                        <artifactId>jetty-servlets</artifactId>
                        <version>${jetty.version}</version>
                    </dependency>
                    <dependency>
                        <groupId>org.eclipse.jetty</groupId>
                        <artifactId>jetty-http</artifactId>
                        <version>${jetty.version}</version>
                    </dependency>
                    <dependency>
                        <groupId>org.eclipse.jetty</groupId>
                        <artifactId>jetty-rewrite</artifactId>
                        <version>${jetty.version}</version>
                    </dependency>
                </dependencies>
                <configuration>
                    <scanIntervalSeconds>10</scanIntervalSeconds>
                    <!-- TODO <jettyConfig>src/main/etc/jetty.xml</jettyConfig> -->
                    <httpConnector>
                        <!--host>localhost</host -->
                        <port>${jetty.port}</port>
                    </httpConnector>
                    <stopPort>${jetty.stop.port}</stopPort>
                    <stopKey>STOP</stopKey>
                    <!--
                    <systemProperties>
                        <systemProperty>
                            <name>fooprop</name>
                            <value>222</value>
                        </systemProperty>
                    </systemProperties>
                    -->
                    <webApp>
                        <contextPath>/test</contextPath>
                        <tempDirectory>${project.build.directory}/work</tempDirectory>
                        <!--
                        <sessionHandler implementation="org.eclipse.jetty.server.session.SessionHandler">
                            <sessionManager implementation="org.eclipse.jetty.server.session.HashSessionManager">
                                <storeDirectory>${basedir}/target/sessions</storeDirectory>
                            </sessionManager>
                        </sessionHandler>
                        -->
                    </webApp>
                </configuration>
            </plugin>
            <!-- Allow this web application to be started with the command : 'mvn
                tomcat7:run' -->
            <plugin>
                <groupId>org.apache.tomcat.maven</groupId>
                <artifactId>tomcat7-maven-plugin</artifactId>
                <version>${maven.tomcat7.plugin.version}</version>
                <dependencies>
                    <dependency>
                        <groupId>${project.groupId}</groupId>
                        <artifactId>${project.artifactId}</artifactId>
                        <version>${project.version}</version>
                        <type>war</type>
                    </dependency>
                    <!--
                    <dependency>
                        <groupId>${jdbc.groupId}</groupId>
                        <artifactId>${jdbc.client.artifactId}</artifactId>
                        <version>${jdbc.version}</version>
                        <scope>runtime</scope>
                    </dependency>
                    -->
                </dependencies>
                <configuration>
                    <!-- http port -->
                    <port>${tomcat.port}</port>
                    <path>/test</path>
                    <!--<contextFile>${basedir}/src/main/webapp/META-INF/context.xml</contextFile> -->
                    <addWarDependenciesInClassloader>true</addWarDependenciesInClassloader>
                    <!--
            <systemProperties>
                <java.security.auth.login.config>${basedir}/conf/jaas.config</java.security.auth.login.config>
            </systemProperties>
            -->
                    <url>${deploy.url}</url>
                    <username>${cargo.remote.user}</username>
                    <password>${cargo.remote.password}</password>
                    <addContextWarDependencies>true</addContextWarDependencies>
                    <addWarDependenciesInClassloader>true</addWarDependenciesInClassloader>
                    <!--<configurationDir>${basedir}</configurationDir>-->
                    <!--<server>nabla-tomcat</server>-->
                </configuration>
            </plugin>
            <plugin>
                <groupId>com.sinapsi.memtracker</groupId>
                <artifactId>mem-tracker-maven-plugin</artifactId>
                <version>${maven.mem.tracker.maven.plugin.version}</version>
                <executions>
                    <execution>
                        <id>integration-test</id>
                        <phase>integration-test</phase>
                        <goals>
                            <goal>track</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <!--<host>127.0.0.1</host>-->
                    <port>${cargo.monitoring.jmx.rmi.port}</port>
                </configuration>
            </plugin>
            <!-- groovydoc -->
            <plugin>
                <groupId>org.codehaus.gmavenplus</groupId>
                <artifactId>gmavenplus-plugin</artifactId>
                <version>${maven.gmavenplus.plugin.version}</version>
                <executions>
                    <execution>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>groovydoc</goal>
                        </goals>
                    </execution>
                </executions>
                <dependencies>
                    <dependency>
                        <groupId>org.codehaus.groovy</groupId>
                        <artifactId>groovy-all</artifactId>
                        <version>${groovy.version}</version>
                    </dependency>
                </dependencies>
                <configuration>
                    <groovydocJavaSources>false</groovydocJavaSources>
                    <groovydocOutputDirectory>${documentation.output.directory}/${groovydoc.directory.name}</groovydocOutputDirectory>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <version>${maven.dependency.plugin.version}</version>
                <!--$NO-MVN-MAN-VER$-->
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>copy</goal>
                        </goals>
                        <configuration>
                            <artifactItems>
                                <artifactItem>
                                    <groupId>org.mortbay.jetty</groupId>
                                    <artifactId>jetty-runner</artifactId>
                                    <version>${jetty.runner.version}</version>
                                    <destFileName>jetty-runner.jar</destFileName>
                                </artifactItem>
                            </artifactItems>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <version>${maven.shade.plugin.version}</version>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                        <configuration>
                            <transformers>
                                <transformer implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer"></transformer>
                                <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                                    <manifestEntries>
                                        <Main-Class>com.test.project.sample.App</Main-Class>
                                    </manifestEntries>
                                </transformer>
                            </transformers>
                        </configuration>
                    </execution>
                </executions>
                <configuration>
                    <createDependencyReducedPom>true</createDependencyReducedPom>
                    <filters>
                        <filter>
                            <artifact>*:*</artifact>
                            <excludes>
                                <exclude>META-INF/*.SF</exclude>
                                <exclude>META-INF/*.DSA</exclude>
                                <exclude>META-INF/*.RSA</exclude>
                            </excludes>
                        </filter>
                    </filters>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-antrun-plugin</artifactId>
                <executions>
                    <execution>
                        <id>lcovFileForSonar</id>
                        <phase>package</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <target>
                                <echo message="Copying LCOV file lcov-karma.info for Sonar purpose to target directory"></echo>
                                <copy flatten="true" todir="${basedir}/target">
                                    <fileset dir="${basedir}/target">
                                        <include name="karma-coverage/lcov-karma.info"></include>
                                    </fileset>
                                </copy>
                                <path id="sourceDirectory.path">
                                    <pathelement location="${basedir}/app/scripts"></pathelement>
                                </path>
                                <pathconvert property="relativeSourceDirectory" refid="sourceDirectory.path" targetos="unix">
                                    <map from="${basedir}/" to=""></map>
                                </pathconvert>
                                <echo message="Base dir: ${basedir} "></echo>
                                <echo message="Source directory: ${project.build.sourceDirectory}"></echo>
                                <echo message="Relative source directory: ${relativeSourceDirectory}"></echo>
                                <echo message="Fixing a problem with a path to the JavaScript path"></echo>
                                <replaceregexp byline="true">
                                    <regexp pattern="SF:\./todo/(.*)"></regexp>
                                    <substitution expression="SF:${relativeSourceDirectory}/\1"></substitution>
                                    <fileset dir="target">
                                        <include name="lcov-karma.info"></include>
                                    </fileset>
                                </replaceregexp>
                            </target>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <profile>
            <id>config</id>
            <activation>
                <file>
                    <exists>src/main/config</exists>
                </file>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-assembly-plugin</artifactId>
                        <executions>
                            <execution>
                                <phase>package</phase>
                                <goals>
                                    <goal>single</goal>
                                </goals>
                                <configuration>
                                    <descriptorRefs>
                                        <descriptorRef>config</descriptorRef>
                                    </descriptorRefs>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>sonar</id>
            <activation>
                <property>
                    <name>!profile.activation</name>
                </property>
            </activation>
            <properties>
                <sonar.sources>src/main,app</sonar.sources>
                <sonar.tests>src/test,test</sonar.tests>
            </properties>
        </profile>
        <!-- Jenkins by default defines a property BUILD_NUMBER which is used to enable the profile. -->
        <profile>
            <id>jenkins</id>
            <activation>
                <property>
                    <name>BUILD_NUMBER</name>
                </property>
            </activation>
            <build>
                <plugins>
                    <!-- DISABLE because it is too slow
                    <plugin>
                        <groupId>org.owasp</groupId>
                        <artifactId>dependency-check-maven</artifactId>
                        <version>${maven.dependency.check.plugin.version}</version>
                        <executions>
                            <execution>
                                <phase>compile</phase>
                                <goals>
                                    <goal>check</goal>
                                </goals>
                            </execution>
                        </executions>
                        <configuration>
                            <format>XML</format>
                        </configuration>
                    </plugin>
                    -->
                    <plugin>
                        <groupId>com.github.eirslett</groupId>
                        <artifactId>frontend-maven-plugin</artifactId>
                        <version>${maven.frontend.plugin.version}</version>
                        <executions>
                            <execution>
                                <id>grunt integration-test</id>
                                <phase>integration-test</phase>
                                <goals>
                                    <goal>grunt</goal>
                                </goals>
                                <configuration>
                                    <arguments>integration-test</arguments>
                                </configuration>
                            </execution>
                            <execution>
                                <id>grunt site</id>
                                <phase>site</phase>
                                <goals>
                                    <goal>grunt</goal>
                                </goals>
                                <configuration>
                                    <arguments>site</arguments>
                                </configuration>
                            </execution>
                        </executions>
                        <configuration>
                            <nodeVersion>v${node.version}</nodeVersion>
                            <!--<npmVersion>${npm.version}</npmVersion>-->
                            <yarnVersion>v${yarn.version}</yarnVersion>
                            <workingDirectory>./</workingDirectory>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
            <properties>
                <maven.test.failure.skip>false</maven.test.failure.skip>
                <maven.test.skip>false</maven.test.skip>
            </properties>
        </profile>
        <profile>
            <id>jetty9x</id>
            <activation>
                <property>
                    <name>server</name>
                    <value>jetty9x</value>
                    <!-- <name>!server</name>-->
                </property>
            </activation>
            <build>
                <plugins>
                    <!-- mvn clean install org.codehaus.cargo:cargo-maven2-plugin:run -Dserver=jetty9x -->
                    <plugin>
                        <groupId>org.codehaus.cargo</groupId>
                        <artifactId>cargo-maven2-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>start-container</id>
                                <phase>pre-integration-test</phase>
                                <goals>
                                    <goal>start</goal>
                                </goals>
                                <configuration>
                                    <configuration>
                                        <properties>
                                            <cargo.start.jvmargs>${jacoco.agent.it.arg}</cargo.start.jvmargs>
                                        </properties>
                                    </configuration>
                                </configuration>
                            </execution>
                            <execution>
                                <id>stop-container</id>
                                <phase>post-integration-test</phase>
                                <goals>
                                    <goal>stop</goal>
                                </goals>
                            </execution>
                        </executions>
                        <configuration>
                            <container>
                                <containerId>${cargo.container}</containerId>
                                <artifactInstaller>
                                    <groupId>org.eclipse.jetty</groupId>
                                    <artifactId>jetty-distribution</artifactId>
                                    <version>${server.version}</version>
                                </artifactInstaller>
                            </container>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
            <dependencies>
                <!-- http://blog.anvard.org/articles/2013/10/06/jetty-proxy-servlet.html -->
                <!-- https://github.com/mdeimel/jetty-proxy -->
                <dependency>
                    <groupId>org.eclipse.jetty</groupId>
                    <artifactId>jetty-proxy</artifactId>
                    <version>${jetty.version}</version>
                    <scope>compile</scope>
                </dependency>
                <dependency>
                    <groupId>org.eclipse.jetty</groupId>
                    <artifactId>jetty-http</artifactId>
                    <version>${jetty.version}</version>
                    <type>jar</type>
                    <scope>runtime</scope>
                </dependency>
                <dependency>
                    <groupId>org.eclipse.jetty</groupId>
                    <artifactId>jetty-rewrite</artifactId>
                    <version>${jetty.version}</version>
                    <type>jar</type>
                    <scope>runtime</scope>
                </dependency>
                <dependency>
                    <groupId>org.eclipse.jetty</groupId>
                    <artifactId>jetty-server</artifactId>
                    <version>${jetty.version}</version>
                </dependency>
                <dependency>
                    <groupId>org.eclipse.jetty</groupId>
                    <artifactId>jetty-servlet</artifactId>
                    <version>${jetty.version}</version>
                </dependency>
                <dependency>
                    <groupId>org.eclipse.jetty</groupId>
                    <artifactId>jetty-continuation</artifactId>
                    <version>${jetty.version}</version>
                </dependency>
                <dependency>
                    <groupId>org.eclipse.jetty</groupId>
                    <artifactId>jetty-servlets</artifactId>
                    <version>${jetty.version}</version>
                    <type>jar</type>
                    <scope>runtime</scope>
                </dependency>
            </dependencies>
            <properties>
                <server.home></server.home>
                <jetty.version>${jetty9.version}</jetty.version>
                <server.version>${jetty.version}</server.version>
                <server.name>${product.name}</server.name>
                <server.port></server.port>
                <datasource>${datasource.name}</datasource>
                <cargo.container>jetty9x</cargo.container>
                <cargo.container.home>${project.build.directory}/jetty</cargo.container.home>
                <!--<cargo.container.url>TODOjetty9</cargo.container.url>-->
                <cargo.container.type>installed</cargo.container.type>
                <cargo.configuration.type>standalone</cargo.configuration.type>
                <cargo.deployables.type></cargo.deployables.type>
                <cargo.port>${jetty.port}</cargo.port>
                <cargo.jmx.activation>${cargo.jetty.jmx.activation}</cargo.jmx.activation>
                <scope.type>${scope.compile}</scope.type>
                <scope.tomcat.only.type>${scope.compile}</scope.tomcat.only.type>
                <scope.tomcat.never.type>${scope.provided}</scope.tomcat.never.type>
            </properties>
        </profile>
        <profile>
            <id>logback</id>
            <dependencies>
                <dependency>
                    <groupId>ch.qos.logback</groupId>
                    <artifactId>logback-classic</artifactId>
                    <version>${logback.version}</version>
                    <scope>runtime</scope>
                    <exclusions>
                        <!-- circular dependency -->
                        <exclusion>
                            <artifactId>slf4j-api</artifactId>
                            <groupId>org.slf4j</groupId>
                        </exclusion>
                    </exclusions>
                </dependency>
                <dependency>
                    <groupId>ch.qos.logback</groupId>
                    <artifactId>logback-core</artifactId>
                    <version>${logback.version}</version>
                    <scope>runtime</scope>
                </dependency>
            </dependencies>
        </profile>
        <profile>
            <id>log4j</id>
            <activation>
                <property>
                    <name>!profile.activation</name>
                </property>
            </activation>
            <dependencies>
                <dependency>
                    <groupId>org.slf4j</groupId>
                    <artifactId>slf4j-log4j12</artifactId>
                    <scope>runtime</scope>
                    <exclusions>
                        <!-- circular dependency -->
                        <exclusion>
                            <artifactId>slf4j-api</artifactId>
                            <groupId>org.slf4j</groupId>
                        </exclusion>
                    </exclusions>
                </dependency>
                <dependency>
                    <groupId>log4j</groupId>
                    <artifactId>log4j</artifactId>
                    <scope>runtime</scope>
                </dependency>
            </dependencies>
        </profile>
    </profiles>
</project>
