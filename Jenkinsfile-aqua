#!/usr/bin/env groovy
@Library('github.com/AlbanAndrieu/jenkins-pipeline-scripts@master') _

def DOCKER_REGISTRY="hub.docker.com"
def DOCKER_ORGANISATION="nabla"
def DOCKER_TAG="latest"
def DOCKER_NAME="ansible-jenkins-slave-docker"

def DOCKER_REGISTRY_URL="https://${DOCKER_REGISTRY}".trim()
def DOCKER_REGISTRY_CREDENTIAL='jenkins'.trim()
def DOCKER_IMAGE="${DOCKER_REGISTRY}/${DOCKER_ORGANISATION}/${DOCKER_NAME}:${DOCKER_TAG}".trim()

String DOCKER_RUNTIME_TAG="latest".trim()
String DOCKER_NAME_RUNTIME="bower-fr-integration-test".trim()
String DOCKER_RUNTIME_IMG="${DOCKER_REGISTRY}/${DOCKER_ORGANISATION}/${DOCKER_NAME_RUNTIME}:${DOCKER_RUNTIME_TAG}".trim()

def DOCKER_OPTS_BASIC = [
    '--dns-search=misys.global.ad',
    '-v /etc/passwd:/etc/passwd:ro',
    '-v /etc/group:/etc/group:ro',
//    '-v /home/jenkins:/home/jenkins',
    '--entrypoint=\'\'',
].join(" ")

def DOCKER_OPTS_COMPOSE = [
    DOCKER_OPTS_BASIC,
    '-v /var/run/docker.sock:/var/run/docker.sock',
].join(" ")

pipeline {
    //agent none
    agent {
        label 'docker-compose'
    }    
    parameters {
        string(defaultValue: 'develop', description: 'Default git branch to override', name: 'GIT_BRANCH_NAME')
        booleanParam(defaultValue: false, description: 'Dry run', name: 'DRY_RUN')
        booleanParam(defaultValue: false, description: 'Clean before run', name: 'CLEAN_RUN')
        booleanParam(defaultValue: false, description: 'Debug run', name: 'DEBUG_RUN')
        booleanParam(defaultValue: false, description: 'Debug mvnw', name: 'MVNW_VERBOSE')
        booleanParam(name: "RELEASE", defaultValue: false, description: "Perform release-type build.")
        string(name: "RELEASE_BASE", defaultValue: "", description: "Commit tag or branch that should be checked-out for release")
        string(name: "RELEASE_VERSION", defaultValue: "", description: "Release version for artifacts")
    }
    environment {
        GIT_BRANCH_NAME = "${params.GIT_BRANCH_NAME}"
        DRY_RUN = "${params.DRY_RUN}".toBoolean()
        CLEAN_RUN = "${params.CLEAN_RUN}".toBoolean()
        DEBUG_RUN = "${params.DEBUG_RUN}".toBoolean()
        MVNW_VERBOSE = "${params.MVNW_VERBOSE}".toBoolean()
        RELEASE = "${params.RELEASE}".toBoolean()
        RELEASE_BASE = "${params.RELEASE_BASE}"
        RELEASE_VERSION = "${params.RELEASE_VERSION}"
    }
    options {
        //skipDefaultCheckout()
        disableConcurrentBuilds()
        ansiColor('xterm')
        timeout(time: 60, unit: 'MINUTES')
        timestamps()
    }
    stages {
        stage('\u2795 Quality - Security - Aqua') {
            agent {
                docker {
                    image DOCKER_IMAGE
                    reuseNode true
                    args DOCKER_OPTS_COMPOSE
                    label 'docker-compose'
                }
            }
            when {
                expression { BRANCH_NAME ==~ /release|master|develop|PR-NOK-.*/ }
            }
            steps {
                script {

                    properties(createPropertyList())

                    if (!params.DRY_RUN && !params.RELEASE) {
                        //AquaScanAndPublish("${DOCKER_RUNTIME_IMG}", "${DOCKER_NAME_RUNTIME}")
                        //withAquaWrapper(imageName: "${DOCKER_IMAGE}", reportName: "${DOCKER_NAME}")
                        // See https://jenkins.io/doc/pipeline/steps/aqua-security-scanner/
                        aqua customFlags: '', hideBase: true, hostedImage: "${DOCKER_IMAGE}", localImage: "${DOCKER_IMAGE}", locationType: 'local', notCompliesCmd: '', onDisallowed: 'ignore', policies: '', register: true, registry: "${DOCKER_REGISTRY}", showNegligible: true
                        
                        //whitesource jobApiToken: '', jobCheckPolicies: 'global', jobForceUpdate: 'global', jobUserKey: '', libExcludes: '', libIncludes: '', product: 'Producttoken', productVersion: '1.0.0', projectToken: 'Projecttoken', requesterEmail: 'alban.andrieu@free.fr'
                    } // if DRY_RUN
                } //script
            } // steps
        } // stage Security - Dependency Aqua
    } // stages
    post {
        cleanup {
            wrapCleanWs(isEmailEnabled: false)
        } // cleanup    
    } // post
} // pipeline
